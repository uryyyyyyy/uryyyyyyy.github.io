<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-11-23T23:44:27+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[アジャイルサムライ]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/11/20/agile-samurai/"/>
    <updated>2015-11-20T23:47:36+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/11/20/agile-samurai</id>
    <content type="html"><![CDATA[<p>ソフトウェア開発において、アジャイル開発は王道（というかソフトウェア以外ではしたくても出来なかった手法）だと理解しています。
その手法について良くまとめられていると評判だった本書を読んで、個人的なポイントをメモしてみました。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274068560/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51b4P511wTL.jpg" width="350" height="500" alt="アジャイルサムライ−達人開発者への道−" title="アジャイルサムライ−達人開発者への道−" /></a></p>

<h2 id="section">概要</h2>

<p>一番大切なことは、常に顧客に価値をもたらすこと。つまりは定期的（一週間毎くらい）に、動く（テスト済みの）ソフトウェアを提供すること。
仕様書や計画書はその補完にしか過ぎない。実際にメリットを提供できて初めて責任を果たしたと言える。</p>

<p>そのために以下を心がける。</p>

<ul>
  <li>大きな問題、ストーリーは小さく分割する。
    <ul>
      <li>大きすぎると期間・仕様が見積もれない。いざ完成してからズレていたと発覚しては遅い。</li>
    </ul>
  </li>
  <li>本当にメリットのあるもののみに注力し、他は忘れる。
    <ul>
      <li>システムのうち、お客様にメリットを提供している機能はごく一部だから。</li>
    </ul>
  </li>
  <li>常に動く状態にする。
    <ul>
      <li>いつでもテスト可能なようにすることで、仕様を満たしていることを保証する。</li>
    </ul>
  </li>
  <li>フィードバック、実挙動の確認を求める。
    <ul>
      <li>仕様を知っていてお金を出すのはお客様なのだから。</li>
    </ul>
  </li>
  <li>必要とあれば方針を変える
    <ul>
      <li>定期的に（イテレーション毎に）顧客と話して機能の優先度、仕様を確認する。なぜなら、仕様もスケジュールも常に流動するから。</li>
    </ul>
  </li>
  <li>説明責任を果たす。
    <ul>
      <li>毎週成果を求められ、また顧客と共に次の計画を考えるため、全てを説明して納得してもらわなければならない。</li>
    </ul>
  </li>
</ul>

<p>しかし、ウォーターフォール型で最後に神頼みをするよりマシかもしれない。</p>

<h3 id="agileagile">なぜagileか。Agileとは何か</h3>

<p>Agileとは、ウォーターフォールと比較して、最初に要件を固めすぎずに都度対応していく方法のこと。
これによって、</p>

<ul>
  <li>早いうちからユーザーにシステムを使ってもらうことで価値を提供できる。</li>
  <li>着実に目に見える形で進捗を重ねることができる。</li>
  <li>急なスケジュール・仕様変更に強くなる。</li>
</ul>

<p>特に最後の部分で、ソフトウェア開発においては以下の経験則が成り立つことを前提としている。</p>

<ul>
  <li>プロジェクトの開始時点に全ての要求をヒアリングできない。</li>
  <li>要求は必ず後で変更される。</li>
  <li>納期や資金に比べて、やるべきことは常に多すぎる</li>
</ul>

<p>ただ、これはハードウェアの世界でもおそらく起きているものの、顧客側が仕方ないと理解しているため問題とならないのではと個人的に推測する。</p>

<h2 id="section-1">登場人物</h2>

<h3 id="section-2">要件は誰が決める？</h3>

<p>ソフトウェアの要件とは、どんな価値を提供するかに当たる。つまりは顧客（あるいはそのドメインの専門家）しか知ることはない。
どの機能がどのくらいの優先度で必要なのか、もしQCD全てをこなすことが難しければ、どの部分で妥協できるのか、などを決める。
ということは、ソフトウェア開発においては顧客も積極的に参加しなくてはいけない。常に要件を発言し、システムのフィードバックを行うことが必要だ。</p>

<p>もしこれらの作業を引き受けてくれる人がいない場合は、まだそのプロジェクト自体の優先度が高くないのかもしれない。他の事に目を向けよう。</p>

<h3 id="section-3">誰が作る？</h3>

<p>開発チームは、テスター、プログラマ、デザイナ、アナリストなどの全ての役割を誰かが担うことになる。
それぞれの役割は明確に区切られているものではないため、スピードを求めると同じ人が複数の責務を担うことが重要になる。要するに、ある程度の専門性を持ちつつ、必要に応じて他の分野の作業も担えるゼネラリストが求められる。</p>

<p>代表的な役割を順番に見ていく。</p>

<h4 id="section-4">アナリスト</h4>

<p>顧客と開発チームの橋渡しを行う。</p>

<ul>
  <li>顧客の要求をヒアリングしてシステムの要件に落としこむ。</li>
  <li>優先度を定義する。</li>
  <li>システムの完了を確認するためのシナリオを用意する。</li>
</ul>

<p>などを担う。</p>

<h4 id="section-5">プログラマ</h4>

<ul>
  <li>要件のコストを見積もる。</li>
  <li>要件を機械語に翻訳する。</li>
  <li>技術選定を行う。</li>
  <li>実装のゴールを定義するテストを作成する。</li>
</ul>

<h4 id="section-6">テスター</h4>

<ul>
  <li>非機能要件（性能、セキュリティ、コスト）のテスト設計を行う。</li>
  <li>テスト作成を手伝う。</li>
  <li>テストを自動化し常に回せるようにする。</li>
</ul>

<h4 id="section-7">プロジェクトマネージャ</h4>

<ul>
  <li>プロジェクトの様子（進捗・タスク）を確認し共有する。</li>
  <li>プロジェクトの環境を整える（開発環境・工数確保）</li>
</ul>

<h4 id="section-8">デザイナ</h4>

<ul>
  <li>よりユーザーが使いやすいUIを考案、実装する。</li>
  <li>ユーザーのニーズを深堀りしてシステムに落としこむ。</li>
</ul>

<h4 id="section-9">ステークホルダーは他も居る</h4>

<p>組織の中でプロジェクトを行っている場合、利害関係者はプロジェクトメンバーだけでない。品質管理の部門やセキュリティ、インフラ部門なども関わるかもしれない。
メンバーだけで突き進むのではなく、彼らのことも気に留めて、時には情報共有をしておく必要がある。</p>

<h2 id="section-10">プロジェクトの進め方</h2>

<h3 id="section-11">目指す方向を共有する</h3>

<p>インセプションデッキと呼ばれるツールを使った例を挙げる。</p>

<h4 id="section-12">チームの目的は何か？</h4>

<p>まずはチームとして集まった目的、作るシステムの概要を確認する。このとき、2,3センテンスでまとめられるレベルまで落としこみ、かつそれが魅力的（顧客がお金を払ってでも欲しがる）であるかどうかを確認する。
もしそこまで落とし込めなければプロジェクトを止めることも有り。</p>

<h4 id="section-13">何をやらないか？</h4>

<p>プロジェクトメンバー、お客様への情報共有としてわかりやすい例。これによって、本当にフォーカスする問題が浮かび上がる。
ただし、まだどうするか決まってないことはやらないことではなく未定とする。</p>

<h4 id="section-14">期間・予算はどのくらいか？実現可能なラインか？</h4>

<p>大まかな要求が決まったら、実現プランを考えていく。（例えばWebアプリを作るとか、データベースはこんな感じにするとか）
ここでは具体的なものではなく、チームや顧客への大まかな道筋の共有ができれば良い。どうせ後で要求も実装も変わってくるから。</p>

<p>また、プロジェクトを進める前に考えられるリスクを先に洗い出しておき、大まかな対策を考える。ここで案を考えておくことで、プロジェクトがひっくり返るリスクを減らしておくことに繋がる。（リスクの起こる確率が大きく、かつ対応不可能であれば、それはプロジェクト自体の筋が悪いのかもしれない。）
もちろん、天災などどうしようもないものは考えるだけ無駄だけど。</p>

<p>そうしてプロジェクトを進めても問題なさそうと推測できるようになったら、最後に大まかにスケジュールとコスト感を見積もる。これはコミットではないが、顧客にとって必要な情報だからだ。
このとき、プロジェクトの規模が大きすぎるときは最長半年くらいで小ゴールを引いておく。そうしないと見積りできなり、顧客もGoの判断を下すことのリスクが大きすぎるから。</p>

<h4 id="section-15">何を妥協できるか？</h4>

<p>往々にしてプロジェクトはスケジュールよりも悪い方向にズレる。
その時になってから妥協案を考えると、顧客に不快感を与えてしまったり、急なことで決断が出来なくなる恐れがある。
そこで事前に妥協できるポイントを聞いておく。</p>

<p>フィーチャのいくつかを削るとか、期日を延ばすとかが典型的な例。
なぜなら、</p>

<ul>
  <li>予算は調整が難しく、またソフトウェアにおいてはお金は万能ではないから。</li>
  <li>品質は、下げたからといって機能が追加できるものではなく、むしろお互いに余計な時間を取られることに繋がりかねないから。</li>
</ul>

<h3 id="section-16">計画を立てる</h3>

<p>まず、計画と実装プランは異なる。最初に大まかな見積もりと優先度でもってイテレーションの計画を立て、その時期が来てから詳細設計と実装案を考える。最初に詳細設計までしない理由は、後で変更される可能性が高いため。</p>

<p>何度も記述されているが、大事なことは「要求は顧客が知っているので、もっと対話を増やすこと」。それによって計画すべきシナリオが明確になる。</p>

<h4 id="section-17">ユーザーストーリーを聞く</h4>

<p>ここでは顧客がシステムに求める機能を簡単にまとめる。これによって、工数の概算やスケジュール感、顧客の要求が共有される。
詳細な仕様や実装案は時期が来たら再度検討するので、ここではキーワードを書き留めて置くことが重要。（技術寄りの実装案などはここでは考えなくて良い。早すぎる最適化になるから。）
もちろん、何が達成できればそのストーリーの実装を終えたと判断できるか、といった大まかなゴールも必要になる。</p>

<p>さらに、ここではなるべく粒度を細かくして互いのストーリーを独立させておくことで、作業がしやすくなり、見積もりも正確になる。</p>

<p>時には仕方なく大きい粒度のストーリーになることもあるが、それは計画段階では大きくしておいて、
実装に落としこむ際に複数に分かれることになる。</p>

<h4 id="section-18">プロジェクト開始の判断をする</h4>

<p>繰り返すが、プロジェクト開始時には、顧客は要求が定まっていないし、開発者もどの技術を使うのかが定まっていない。
またプロジェクトに割ける工数やコストも変化したり、ビジネス環境が変わってプロジェクト自体の見直しを迫られるかもしれない。
上記の情報が一切変動しないような特殊な状態でない限り、初期時に性格な見積もりをすることはできない。（逆に決まってたら、エンジニアは一切頭を使わないコーディングマシンとして働かされることになるだろう。）
まずはそこを自覚した上で、ざっくり「与えられた期間・コスト内に、必要最低限のシステム構築ができそうか？」だけチェックする。
決して多くをコミットしてはいけない。それは論理的に算出した数値ではなく希望的観測だから。</p>

<h4 id="section-19">実装するストーリーの重み付けをする。</h4>

<p>「工数」のような絶対的指標で見積もることは止めたほうがいい。そもそも出来ないし、人によって作業スピードが違うため。
そうではなく、相対的に「この作業はこの作業と同じくらい大変」「この作業ははるかに難しい」などのざっくりした区別をする。</p>

<h4 id="pdca">実際に作業をしてPDCAを回す。</h4>

<p>実際にストーリーの実装（システム開発）を行っていく。
ここでは小さくイテレーションを切って作業し、都度振り返って進捗を確認する。
イテレーションは１週間〜３週間が目安で、理由としては</p>

<ul>
  <li>作業が小さい粒度になっているため細かすぎることはない</li>
  <li>早めに顧客に見せてFBをもらうことで、期待値コントロールや、問題があった場合の即座の改善ができる。</li>
  <li>進捗を確認することで、スケジュール変更が必要な場合に早めに気づくことが出来る。</li>
</ul>

<h3 id="section-20">トラブル発生時には</h3>

<h4 id="section-21">スケジュールが間に合わなさそう</h4>

<p>イテレーションを重ね、チームの開発速度がわかったところで残タスクをみると明らかに間に合わなくなることが往々にして起きる。原因は</p>

<ul>
  <li>予想より速度が遅かった</li>
  <li>チームメンバーが抜けた。</li>
  <li>顧客の要望が変わった、増えた。</li>
</ul>

<p>こういった場合は、顧客に正直に伝え、期限を延ばすか機能を一部削いでもらうことで対応する他ない。</p>

<h2 id="section-22">まとめ</h2>
<p>アジャイルな開発は今のソフトウェアが複雑化した次代に必須なんだろうけど、それをするには技術やアジャイルな開発に抵抗のない顧客が居ることが大前提だなと思った。
（わかってない人が顧客だと、無理なスケジュールを押し付けてきたり、計画変更を拒絶したりしそう。そのくせ要求をきちんと伝えてくれなくて後から揉めそう。）</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ジョコビッチの生まれ変わる食事]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/11/18/djokovic-serve-to-win/"/>
    <updated>2015-11-18T23:45:41+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/11/18/djokovic-serve-to-win</id>
    <content type="html"><![CDATA[<p>最近、引っ越したのとまとまった休みを頂いたのがあって、生活習慣を改善しようと試みています。
その一環としてグルテンフリーなどの健康食に興味がわいたので試しに読んでみました。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4883206335/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51cTxBiCgDL.jpg" width="340" height="500" alt="ジョコビッチの生まれ変わる食事" title="ジョコビッチの生まれ変わる食事" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラマが知るべき９７のこと]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/11/18/97-things-programmer-should-know/"/>
    <updated>2015-11-18T23:25:30+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/11/18/97-things-programmer-should-know</id>
    <content type="html"><![CDATA[<p>以前読んだけど、最近の経験を踏まえて改めて読んでみたら当時はよりもすんなり理解できることが多かったので、気になる点を個人的な意見と共にまとめます。
初心者から中級者まで定期的に読み返すべき良書だと思います。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873114799/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/511RPej0BNL.jpg" width="353" height="500" alt="プログラマが知るべき97のこと" title="プログラマが知るべき97のこと" /></a></p>

<h3 id="section">何を作ればいいのか</h3>
<p>ユーザーの欲求・行動を知ることが大前提。
プログラムは開発者でなくユーザーに価値を提供するために作るものだから。</p>

<p>推測で実装するのはダメ。説明できないから。ユーザーのニーズを探り、また実際の行動を追いかけて初めて、何を作ればいいのかが見えてくる。
その際は抽象的なものではなく具体的なシナリオで考えること。</p>

<p>APIなどの利便性は、常に使う相手のことを考えたものであるべき。
開発者にとって楽なものは工数に現れ、ユーザーにとって良いものはメリットに現れる。</p>

<p>また、YAGNI・DRYの原則は守るべき。最適化もまだ早い。
最初はアドホックな実装で構わない。どうせ要件は後で変わるのだから。</p>

<h3 id="section-1">技術的負債・リファクタリング</h3>

<p>技術的負債を持つことは悪くない。
問題はそれをいつまでも返済しないこと。</p>

<p>リファクタリングの注意点</p>

<ul>
  <li>テストコードの用意。仕様の確認
    <ul>
      <li>→まずゴールと現状を知らなければ手を付けてはいけない。テストがないのはありえない。</li>
    </ul>
  </li>
  <li>ゼロから書きなおすのは基本NG
    <ul>
      <li>既に動いていてバグ修正も行われているものを作りなおすのは手間が掛かり過ぎる。</li>
    </ul>
  </li>
  <li>少しずつの修正が大事
    <ul>
      <li>他人にも流れが理解しやすい。うっかり互換性を壊すなどの心配がない</li>
    </ul>
  </li>
  <li>好みやエゴ、新技術はそれだけでは改修の理由にはならない。
    <ul>
      <li>どのくらいメリットがあるかを示す必要がある。</li>
    </ul>
  </li>
</ul>

<h3 id="section-2">オブジェクト指向 ドメイン指向</h3>

<p>単純なデータのやりとり（get/setなど）を記述するのではなく、そのドメイン・オブジェクトに特化した処理を記述する。
そうすることで、自然言語に近くなり、初見でも仕様を理解しやすくなる。</p>

<p>また、扱うデータは必要最小限が理解しやすい（テストもしやすい）ので、それ用の型を用意してあげるとより理解が楽。例えば数字を扱う場合でも、それがある値の範囲内にあるべきならそれ用の型を用意する。（時間なら23までとか。欧米なら11か12までかもだけど。）</p>

<h3 id="section-3">レビュー</h3>

<p>コードレビューはコードの質を上げるためだけではなく、互いの技術の理解度チェック、仕様の確認にも役立つ。
（前者は実装コード、後者はテストコードで確認できる？）</p>

<h3 id="section-4">コメント</h3>
<p>コードに書けないことのみをコメントに残す。
例えば、その実装を用いた理由や他の候補案など。あるいは外部に公開するインターフェースも、内部でどう動くかまではコードに起こせない（インターフェース利用者が黄にすべきではない）ので必要になるだろう。</p>

<p>しかし、それ以外のものをコメントしたい場合は、コードで表現できないかをまず考える。表現出来ない場合は、言語か自分の能力に限界がある可能性が高い。</p>

<h3 id="section-5">するべきことは常に明確に</h3>

<p>「〜〜の実装」などという曖昧な内容で作業（チケットの消化）をすべきではない。これには以下のようなものが内包されている。</p>

<ul>
  <li>〜〜の実装案の収集</li>
  <li>収集した案の中からの検討</li>
  <li>検討方針の検証コード</li>
  <li>実装</li>
</ul>

<p>これらをきちんと分けるべき。</p>

<p>実装方針・仕様が曖昧な状態でリポジトリを変更してはいけない。まず検証する際は別の小さなサンプルで試す。
つまり、なるべく小さく試せることが重要になる。（そのために定期的にリファクタリングし粗結合を保つ。）</p>

<h3 id="section-6">見積もりとコミット</h3>

<p>見積もりはプログラマ（実装する人）が決めるもの。希望納期はお客様が決めるもの。
コミットは、プログラマ・PM・お客様の合意で決まるもの。
見積もりや希望納期はPMが決めることはできない。
これはもちろんスケジュールとターゲット（実装内容）を含んだもの。</p>

<h3 id="section-7">プロであるために</h3>

<p>医者と比較してみる。</p>

<ul>
  <li>プロはその場しのぎでなく確実に業務をこなす。</li>
  <li>プロは常に学び続ける。</li>
  <li>プロは自分の書いたコードに責任を持ち、バグが出ないとみなせるレベルで仕上げる。</li>
  <li>プロはタスクリストの数を常にコントロールする。</li>
  <li>自分に出来ないことはない。後は納期とコストの問題。</li>
</ul>

<p>もしこれらを意識出来ていなければ、形・思考だけでもプロになりきってみる。それも仕事の一部。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソフトウェア開発で徹底すべき４つのポイント]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/10/17/4-point-of-develop-software/"/>
    <updated>2015-10-17T13:23:43+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/10/17/4-point-of-develop-software</id>
    <content type="html"><![CDATA[<p>今までいくつかシステムの設計〜保守までやってきた中での失敗などを元に、
システム開発のあり方をまとめてみました。</p>

<!--more-->

<h3 id="section">概要</h3>

<p>愚者は経験から学び、賢者は先人から学ぶと言いますが、
僕は残念ながら経験するまでは理解しようとしなかったので、
せめて経験から学ぶことと、今後同じ事態に陥る人が減るようにまとめておきます。</p>

<p>現時点までの個人の実体験を踏まえての考察なため、全く的外れだったり当たり前すぎて呆れるかもしれませんし、
既にアジャイルやXP、リーン開発などで語り尽くされた内容かもしれません。</p>

<p>そのあたりは後日改善していきたいと思っています。</p>

<h3 id="section-1">前提条件</h3>

<p>なお前提として以下二点を挙げます。</p>

<h4 id="section-2">ユーザーのニーズが事前に定義できないこと。</h4>

<p>もし事前に仕様を明確に定義できる場合は、保守などは考えずにそのニーズに合うものを作れば終わりです。
多少の優先度付けは必要かもしれませんが、そんな単純なケースであれば、どう開発してもなんとかなりそうです。</p>

<p>明確な定義は避けますが、いわゆるウォーターフォール的な長期のイテレーションでの開発を対象外としています。
というか最近のソフトウェア開発では、規模やリリース時期に関わらず内部的には短期のイテレーションを回すのが最善だと思っています。評価フェーズをどこまで徹底するかは置いておいて、開発のフローとして。
理由は以下の３つです。</p>

<ul>
  <li>単体の複雑度が増していて、長期のイテレーションは大抵人の理解が追いつかないだろうこと。</li>
  <li>システム内で責務をモジュール毎に分けて連携していくのが常識な中で、長期のイテレーションでは連携が遅れてしまうこと。</li>
  <li>プログラミングの抽象度が上がったことで、短期の繰り返しによるコードの書き直しのコストがかなり低減されていると思うこと。</li>
</ul>

<h4 id="section-3">既存システムが存在し、目的が似ている場合</h4>

<p>ある程度似た目的のシステムが既にある場合は、そこをベースとして開発していくのが近道でしょう。
（フォークして開発するとか、プラグインを作るとか）</p>

<p>これが出来ない以下のようなケースの場合、新しい目的に向けた別の手段（新システムを0から作るなど）を取ることになるでしょう。</p>

<ul>
  <li>特許やライセンスの都合上利用できない</li>
  <li>サービスはあるが実装が公開されていない</li>
  <li>そもそも市場やOSSに似た目的のシステムがない。</li>
</ul>

<p>その場合は、アルファ版を作った後は今回の対象範囲となります。</p>

<h4 id="section-4">コードが再利用できないことが明白な場合</h4>

<p>例えば以下のようなケースです。</p>

<ul>
  <li>Javaの実装は既にあるが、性能向上のためCで書き直したい。</li>
  <li>rubyで書かれている便利なライブラリをJavaにも移植したい。</li>
  <li>RDB前提ではなくNoSQL前提にしたいので、処理単位やUIが大きく変わる。</li>
</ul>

<p>その場合は、流用できるロジックは参考にしつつ、しかし既存のものとかなり違う中身になることでしょう。
ここでも、アルファ版を作った後は今回の対象範囲となります。</p>

<h3 id="section-5">ポイント</h3>

<p>ソフトウェア開発にあたって重要だと考えている４つのポイントは以下です。</p>

<ul>
  <li>そのシステム（プロジェクト）の目指す方向性はどこなのかを明確にする。</li>
  <li>機能追加は、必ず満たしたいニーズだけにフォーカスする。</li>
  <li>機能開発と既存設計の変更は同時には行わない。</li>
  <li>既存コードの変更はチーム全員が理解できる単位まで細かくする。</li>
</ul>

<h4 id="section-6">そのシステム（プロジェクト）の目指す方向性はどこなのかを明確にする。</h4>

<p>プロジェクトとして何を目指すのか？どこまでを範囲とするのか？といったことを、<strong>実装を抜きにして</strong>チーム内外と共有することで、</p>

<ul>
  <li>類似のシステムが既にないか調べることができ、車輪の再発明を防げる。</li>
  <li>プロジェクトの領域が明確になり、ユーザーのニーズとのミスマッチや理不尽な要求が減る。</li>
  <li>各作業に優先順位を付ける際の指標となり、開発の効率が上がる。</li>
</ul>

<p>どこまで具体的に突き詰めるかは、上記の目的が果たせるかどうかで判断する。</p>

<p>なお、方向性はなるべく変わらないことが望ましいが、チーム内では定期的に再定義すると良いと思う。</p>

<h4 id="section-7">機能拡張は、最も解決したい問題だけにフォーカスする。</h4>

<p>設計段階では、ユーザーのニーズを調べているうちに頭の中でおおまかな設計が出来上がってきて、色々な非機能要件も組み込んでいたりする。
そして、いざ仕様を策定する段階に入ると、無意識にその設計に引きずられてしまい、本来であれば必要のない箇所まで作りこんでしまう。
そうなると、</p>

<ul>
  <li>他人に説明するときに、結論ありきになり段階を飛ばして説明してしまい理解されない</li>
  <li>全部作ろうとして工数や優先順位がメチャクチャになる。</li>
  <li>他の案をシャットアウトした独りよがりな実装プランになる。</li>
</ul>

<p>それを防ぐために、直近で問題になっていることやユーザーのニーズの特に重要なもののみにフォーカスして、その解決方法のみをアドホックに考えることが重要だと考えます。
その仕様がちゃんと理解されたら、さっさと作ってしまい再度ユーザー・社内に共有する。
すると網羅できていなかったパターンや新たな要望が出てくるので、それを繰り返し潰していく。</p>

<p>ただ、そういった細かなリリースやニーズの調査が難しいケースもあるでしょう。
その場合でも、複数の要望を聞いた上で、その要求を細かく再定義し足りないところは推測して補いリスト化し、問題ないか社内外にチェックしてもらい、問題なければ優先度の高いものからひとつずつ解決していきます。
こうすることで、リリース時に全部間に合えば問題ないし、間に合わなくても全部リバートされることはなく出来ている範囲で利用してもらえて、残りは次回に回すことが出来ます。</p>

<h4 id="section-8">機能拡張と既存コードの変更は同時には行わない</h4>

<p>機能拡張を設計・コーディングするときに、</p>

<ul>
  <li>既存のコードのこのAPIをこう直せば新機能で使えそうだな</li>
  <li>機能拡張を含めてデータ構造を考えると、今のデータ構造はイケてないから直したい</li>
</ul>

<p>などという考えが出てきます。
それ自体を考えることは必要だと思いますが、機能拡張時に同時並行でそれをやると、無理に構造を変えてバグを生んだり、実装が間に合わなかったり要求とズレていた時にリバートしたら手戻りが増えてしまったりします。</p>

<p>そこで、機能拡張と既存コードのリファクタリングをはっきり分け、</p>

<ul>
  <li>機能拡張は既存のコードに一切修正せずにコードを書く。</li>
  <li>既存コードのリファクタリングは、外から見た挙動を一切変えずに内部を変える。（deprecatedや不要なため削除はアリ）</li>
</ul>

<p>とします。
こうすることで上記の問題がなくなると共に、</p>

<ul>
  <li>機能拡張時は既存コードとの一貫性やコードの綺麗さを意識せずにガッと作れる。（むしろこの時点でデータ構造の最適化とか考えるのは早すぎる。）</li>
  <li>機能拡張のたびに既存コードの変更は必ず発生するので、リファクタリングやテストの意識が徹底される。</li>
  <li>テストコードの寿命が伸びるかも。</li>
</ul>

<p>といったことが見込めると考えます。</p>

<h4 id="section-9">既存コードの変更はチーム全員が理解できる単位まで細かくする。</h4>

<p>バグだらけでまともに動かない・ユーザーが誰も利用していない、ものは例外として、
とりあえず動いていてユーザーに利用されているものは、どんなコードでも最大限の敬意を払うべきです。</p>

<p>ちょっと見た時点だと、仕様がわかりにくいとか実装がクソだとか思って０から書き直したくなりますが、そんな無茶をすると</p>

<ul>
  <li>どこかで辻褄が合わずバグに繋がる</li>
  <li>チームの人が差分を見ても問題ないのか判断がつかない</li>
  <li>現状の挙動が少しでも変わると、ユーザーを混乱させかねない。（また、デグレはすごく評価が下がる。）</li>
</ul>

<p>ということで慎重に行う必要があります。
この問題において、僕はチームの人全員が差分を理解でき、システムが提供する挙動に問題がないことが重要だと考えています。ここでいうチーム全員には非エンジニアが含まれる場合もあります。</p>

<h3 id="section-10">まとめ</h3>

<p>とにかく、コードの更新は誰もが理解できる粒度まで小さくすることが最重要で、データ構造やアルゴリズム、コードの最適化は二の次かなと思っています。
機能拡張であればその機能を満たす単位、既存コード変更であれば差分がわかる範囲です。</p>

<p>また、限られたリソースの中で最大限のメリットを提供するためには、プロジェクトとしての優先順位をきちんとつけなくてはいけないですよね、という当たり前の話もしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bitcoinの仕組み]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/24/mechanism-of-bitcoin/"/>
    <updated>2015-05-24T12:31:25+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/24/mechanism-of-bitcoin</id>
    <content type="html"><![CDATA[<p>今更ながらbitcoinの仕組みを調べたのでまとめる。</p>

<!--more-->

<h2 id="bitcoin">bitcoinの仕組み</h2>

<p>お金の決済においては、不正取引の無効化の仕組みが必須。</p>

<h3 id="section">お金の所有者以外の取引の防止（トランザクション）</h3>

<p><img src="http://bitcoin.peryaudo.org/fig_transactions.png" alt="alt" /></p>

<p>bitcoinでは、各通貨（おそらく最小単位である1satoshi毎）を取引履歴の塊として表現する。</p>

<p>この仕組みを使うことで、送り手と受け手が正しいことが保証される。受け手が正しいことは、次回の送り手が正しいかの判定に利用する。</p>

<p>試しに、最後のトランザクションにおいて、本人確認が出来るか検証する。</p>

<ul>
  <li>前回のトランザクションに、Bさんの公開鍵情報が入っている。</li>
  <li>それを使って今回のトランザクションの署名を解くとある値（X）が出てくる。</li>
  <li>また、前回の取引全体のハッシュをCさんの公開鍵で暗号化すると、ある値（Y）が出てくる。</li>
  <li>XとYが等しければ、BとCの取引であることが第三者にもわかる。</li>
</ul>

<p>これにより、お金の所有者を偽造することができなくなった。
残る不正は、送り手が複数の取引を同時に行うことができてしまうこと。（二重取引）
これによって、同一（同じ取引履歴）のビットコインが複数の相手に渡ることになる（偽札を掴まされたこととほぼ同義。）</p>

<h3 id="section-1">二重取引の防止（ブロックチェーン）</h3>

<p>上述の仕組みだけでなく、どの取引が正しいのかを判定する必要がある。
この判定は個人間ではいくらでも偽造できるので、全体で承認される必要がある。</p>

<p>しかしｐ２ｐにおいては、承認を担う役割の人がいない。（普通は銀行やカード会社がそれを担っている。）
ｐ２ｐにおいて全体で承認されるということは、ネットワーク上で多数（過半数）に承認されることを意味する。</p>

<p>その仕組みとして、bitcoinでは全体で一つのブロックチェーンを共有することになっている。
ブロックチェーンが持つ情報は以下</p>

<p><img src="http://bitcoin.peryaudo.org/fig_blockchain.png" alt="alt" /></p>

<p>これにより、ブロックチェーンをたどれば、どの取引が正しいのか、誰がいくら所持しているのかがわかる。
また、ブロックチェーンの特徴として、</p>

<ul>
  <li>各ノードの計算能力を利用して一定時間掛けて生成される。
    <ul>
      <li>個人（閉じた一部のネットワーク）がブロックチェーンを生成するのは膨大なコストがかかる。</li>
      <li>ブロックが生成されるまでの間に、取引は各ノードに普及すると考えて良い。</li>
    </ul>
  </li>
  <li>もしチェーンが分岐した場合、長い方のノードを正とする。</li>
  <li>ブロックは複数の取引を含んでいる（理由は後述）</li>
</ul>

<p>が挙げられる。</p>

<p>さて、これによって先ほどの二重取引がどう解決されるかを見ていく。</p>

<h4 id="bitcoin-1">ほぼ同時のタイミングで同じbitcoinの授受が発生した場合。</h4>

<ul>
  <li>２つの取引が各ノードに行き渡る。</li>
  <li>各ノードがブロックの生成を行うが、同じbitcoinを用いた取引が複数ある場合、その取引は無効として除去してブロック生成を行う。</li>
  <li>生成されたブロックが市場に出回り、それが正しいブロックチェーンとして認定される。</li>
  <li>同じbitcoinを用いた取引はいつまでもブロックチェーンに組み込まれることがないので、承認されない取引となる。</li>
</ul>

<h4 id="bitcoin-2">一定以上の間隔を空けて同じbitcoinの授受が発生した場合。</h4>

<ul>
  <li>一つ目の取引が各ノードに行き渡る。</li>
  <li>各ノードが、その取引を含んだブロックを生成する。</li>
  <li>生成されたブロックが市場に出回り、それが正しいブロックチェーンとして承認される。</li>
  <li>２つ目の取引が市場に出回っても、既に別の取引が承認されているため、いつまでも承認されない。</li>
</ul>

<h4 id="bitcoin-3">微妙にずらしたタイミングで同じbitcoinの授受が発生した場合。</h4>
<ul>
  <li>一つ目の取引がある程度のノード（範囲X）に行き渡る。</li>
  <li>範囲Xが、その取引を含むブロックを（Xブロック）を生成する。</li>
  <li>２つ目の取引がある程度のノード（範囲Y）に行き渡る。</li>
  <li>範囲Yが、その取引を含むブロックを（Yブロック）を生成する。</li>
  <li>Xブロックを含んだチェーンがネットワークの多数を占めると、一つ目の取引が承認される。</li>
  <li>逆にYブロックを含んだチェーンがネットワークの多数を占めると、２つ目の取引が承認される。</li>
  <li>（長いブロックチェーンが勝つため、あとから承認された方はいずれ消えていく。）</li>
</ul>

<p>ここで問題になるのが２つ。</p>

<ul>
  <li>ブロックを生成するのにコストがかかる。</li>
  <li>取引が承認されるまでに時間がかかる。</li>
</ul>

<h3 id="section-2">ブロックを生成するのにコストがかかる</h3>

<p>個人でブロックを生成するにはコストがかかると書いた。（そのため不正をするのは割に合わない）
しかし、コストがかかるだけでは誰もやりたがらない。</p>

<p>そこでbitcoinは、そのブロックチェーンを作る処理に報酬を与えることで解決した。
報酬は、新規にコインを発行する場合もあれば、手数料をもらう場合もある。
（俗に言うマイニングとはこのブロックの生成を指す。）</p>

<p>手数料をもらう場合、ある程度の規模のお金が動かないと手数料が割に合わなくなるため、複数の取引をまとめることになった。
（また、これは取引をひとつずつ承認する場合と比べて時間短縮にもなる。）</p>

<h3 id="section-3">取引が承認されるまでに時間がかかる</h3>

<p>これはbitcoinがもつ本質的な問題で、p2pを使う以上避けられないと考えられる。</p>

<p>これを解決するスキームもあるらしいが、理解できていない。
（p2pのやり方ではなく、スキームの運営者が権限とコストを担うことで成立するモデルのように見える。。）</p>

<p><a href="http://btcnews.jp/should-not-wait-for-bitcoin-confirmation/">もう10分待たなくてもいい、ビットコイン取引承認時間への解法「Impulse」</a></p>

<h2 id="section-4">参考資料</h2>

<p>図は「Bitcoinの仕組み」のものを拝借しました。</p>

<ul>
  <li>
    <p><a href="http://bitcoin.peryaudo.org/design.html">Bitcoinの仕組み</a></p>
  </li>
  <li>
    <p><a href="http://wazanova.jp/items/1314">ブロックチェーンをもう一段深く理解する</a></p>
  </li>
  <li>
    <p><a href="https://www.igvita.com/2014/05/05/minimum-viable-block-chain/">Minimum Viable Block Chain</a></p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[量子コンピュータ―超並列計算のからくり]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/06/quantum-computer/"/>
    <updated>2015-05-06T21:11:32+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/06/quantum-computer</id>
    <content type="html"><![CDATA[<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062574691/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51ZYH1QVE6L.jpg" width="324" height="500" alt="量子コンピュータ―超並列計算のからくり (ブルーバックス)" title="量子コンピュータ―超並列計算のからくり (ブルーバックス)" /></a></p>

<h2 id="section">機械では解けないとされる問題がある。</h2>

<p>問題が明確に定義できないもの。計算量の多すぎるもの。（俗にNP問題と言われるもの）</p>

<ul>
  <li>巡回セールスマン</li>
  <li>囲碁</li>
  <li>因数分解</li>
  <li>組み合わせ全般</li>
</ul>

<h2 id="section-1">仕組みの概要</h2>

<h3 id="section-2">量子の双対性</h3>

<p>主な内容は当ブログの別記事参照。</p>

<p>ここでは光子を例に取る。</p>

<p>偏光ビームスプリッタに45度偏光の光子を入れると、半分の確率でどちらかに出てくるが、どちらに出てくるかは測定してみないとわからない。</p>

<h3 id="section-3">確率波</h3>

<p>偏光ビームスプリッタを2つ用意して位相をずらすと、波が増幅しあうときには現れる確率が増え、打ち消しあうときには現れる確率が減る。こういった事象を確率波と呼んでいて、これを利用する。</p>

<p>測定した瞬間に確率が崩れる。</p>

<h3 id="section-4">基本となるゲート</h3>

<p>従来の機器の基本ゲートがNANDゲートであるように、</p>

<p>量子ゲートには二種類ある</p>

<ul>
  <li>
    <p>スピン（アダマール変換）を行うゲート</p>
  </li>
  <li>
    <p>制御q-bitの値に応じて反転を行うゲート</p>
  </li>
</ul>

<h3 id="section-5">結果を取り出したら結果は一意に収束する</h3>

<p>重ね合わせを用いることで、複数の入力パターンを一度に試すことはできる。
しかし「観測したらその瞬間に確率は壊れる」といったとおり、結果を取り出したら一つに収束してしまう</p>

<p>それでは使い物にならないと思うかもしれないが、確率波を操作することで特定の条件の確率だけを高めることが出来る。</p>

<p>以下に具体的なアルゴリズムを載せる。</p>

<h3 id="section-6">ドイチュ-ジョサのブラックボックス</h3>

<h4 id="section-7">ゴール</h4>
<p>あるビット列が入っており、そのビット列と入力のxorをとったものを出力する回路をブラックボックスとおく。
このとき、この「あるビット列」の０と１の個数が等しいか、全て０か１であるかを判別したい。</p>

<h4 id="section-8">従来のアルゴリズム</h4>

<p>一つ一つ順番に試す。最大でn/2+1まで試せばわかる。</p>

<h4 id="section-9">量子コンピュータのアルゴリズム</h4>

<p>１の状態を持つ量子ビットにアダマール変換をかけて50%の重ねあわせの状態にしてブラックボックスにかける。
あるビット数の量子を入力して、ブラックボックスにかけて変換したのちに制御ビットを反転する。
すると解があるもののみ位相がずれる。
それを再度ブラックボックスにかけてからアダマール変換をかける。</p>

<p>すると、均一の場合はアダマール変換をかけると全て0に収束するのだが、等分の場合は部分的に位相が反転しているためそうならない。</p>

<h3 id="section-10">グローバーのアルゴリズム</h3>

<h4 id="section-11">ゴール</h4>
<p>ある値を入れた時のみ１（あるいは入力を反転したもの）を出力する回路をブラックボックスとおく。
このとき、「ある値」を調べたい</p>

<h4 id="section-12">従来のアルゴリズム</h4>

<p>一つ一つ順番に試す。最大でnまで試せばわかる。</p>

<h4 id="section-13">量子コンピュータのアルゴリズム</h4>

<p>１の状態を持つ量子ビットにアダマール変換をかけて50%の重ねあわせの状態にしてブラックボックスにかける。
すると特定のビット列の場合のみ反転するので、その結果に「折り返し量子回路」をかける。（この処理は複雑だが、一つだけずれているビット列があるとそれの比率を上げてくれる。）
その操作を何度か繰り返すことで、特定のビット列の発生する確率がドンドン高くなるので、適度なタイミングで測定する。
高い確率で求めたいビット列になっているので、試しにそのビット列を入力してみて正しく反転するか確認する。
もし違っていたら同じ操作を繰り返す。</p>

<h2 id="section-14">ショアのアルゴリズム。</h2>

<h4 id="section-15">ゴール</h4>
<p>因数分解を高速に行う。</p>

<p>ユークリッドの互除法を使って最大公約数を求める方法は見つかっている。</p>

<p>ある数nに対して互いに素な数xを用意し、x^r/nの余りが1を満たす自然数rを探す。</p>

<p>それが偶数であれば、(x^r)/2-1と(x^r)/2+1はnと１以外の約数を持つ。</p>

<p>これでｎが因数分解できる。あとはこの繰り返し。</p>

<p>このうち、rを効率よく探す方法がなかった。</p>

<h4 id="section-16">従来のアルゴリズム</h4>

<p>一つ一つ順番に試す。</p>

<h4 id="section-17">量子コンピュータのアルゴリズム</h4>

<p>（※理解不足）</p>

<h2 id="section-18">実現に向けて</h2>

<p>用いる量子として光子が検討に上がっている。
すでに一粒単位で取り出す方法や検出する方法が確率されている。</p>

<p>また、アダマールゲートは半透鏡か偏光で、量子位相ゲートは鏡の中にセシウム原子を置くことで解決しようという試みがある。</p>

<h3 id="section-19">量子暗号</h3>

<p>暗号は中間車に盗聴されてしまう危険を常に孕んでいる。</p>

<p>ところが量子暗号を使うと、盗聴者が覗き見た時点で答えが変わることを利用する。</p>

<p>これが普及すれば、インターネットにおける認証局が不要になる</p>

<p>送信側は45度偏光させたものかそのままかの光子を送る。
受けては偏光して受け取るかそのまま受け取るかをランダムに選び受診する。
このとき、もちろん意図しない伝え方でつ変わることがありうる。</p>

<p>盗聴者がいた場合、送信受診の偏光具合が合っていても誤った情報が送られることが25%ありえる。</p>

<p>それを定期的に検出することで、その暗号が他者に傍受されていないか調べることができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[超弦理論入門]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/06/superstring-theory/"/>
    <updated>2015-05-06T16:23:55+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/06/superstring-theory</id>
    <content type="html"><![CDATA[<p>近年話題になっている量子コンピュータ関連で興味が出てきた、量子力学や超弦理論の本を読みあさっています。
今回は超弦理論について。初心者にもわかりやすくまとめた良書でした。</p>

<p>（超弦理論は、現在確認されている現象を矛盾なく説明できる唯一の理論ですが、まだ定理として認められてはいません。また、僕は自分の理解した限りの抽象的な説明しかできないのでそのあたりを踏まえて見てください。）</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4062578271/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41XjQpW7izL.jpg" width="325" height="500" alt="大栗先生の超弦理論入門 (ブルーバックス)" title="大栗先生の超弦理論入門 (ブルーバックス)" /></a></p>

<h2 id="section">光とは何か</h2>

<h3 id="section-1">古典物理においては波</h3>

<p>干渉縞の実験が有名</p>

<h3 id="section-2">光電効果においては粒子</h3>

<h4 id="section-3">事実</h4>

<ul>
  <li>電子が飛び足すかどうかは波長だけで決まった。ただ飛び出す量は光の強さで変わった。</li>
  <li>飛び出したエネルギーも波長だけで決まった。</li>
</ul>

<p>これらは光が波では説明できない。
波として考えると、光の強さ（振幅）を上げていけばいずれ電子が飛び出るはずだし、エネルギーも強くなるはず。</p>

<h4 id="section-4">事実をうけての考察（光量子仮説）</h4>

<p>アインシュタインは、光は連続した波だけでなく、ある値でエネルギーの最小単位を持ちそれ以下に分割できないことから、あたかも粒のように振る舞うのではと仮定した。（波と粒の両方の性質（双対性）を持つものを「量子」という）</p>

<p>その場合、光子（光の粒）の一つ一つは振動数に比例したエネルギーを持ち、光の振幅は光子の量とした。</p>

<p>すると、光子の持つエネルギーが電子が金属から飛び出すのに必要なエネルギーを越えると、光電子効果が起きると説明できる。その飛び出した電子のエネルギーは光子のエネルギー（振動数）から生じることになる。</p>

<p>これまで光子が観測されてこなかったのは、エネルギーの最小単位（プランク定数）が小さすぎるためだとされた。</p>

<h3 id="section-5">電磁場</h3>

<p>磁石の周りに砂鉄をまいた図をイメージするとわかりやすい。</p>

<p>遠隔でも伝わる力を表すための概念を指す。定義としては、空間の各点で力の大きさや向きが決まっているもの。
電磁場においては距離の二乗に反比例する力が生じる。</p>

<p>マクスウェル方程式によって磁場、電場が同一のものとされたので、ここでは電磁場と総称する。</p>

<h3 id="section-6">光は電磁波</h3>

<p>マクスウェル方程式とその理論的予言、後の実験による実証によって、光は電磁波の一部だとわかった。</p>

<p>電磁波はエネルギーを伝えるものであって電荷や質量は持たない。その最小単位である光子も同じ。</p>

<p>（電子は電荷を持つ物質で質量も持つ。）</p>

<h2 id="section-7">弦理論が生まれたわけ</h2>

<h3 id="section-8">従来は点だと考えられていた</h3>

<p>あらゆる物質の元となるもの（素粒子）とは何かを考える際に、当初は点（部分を持たないもの）と考えられていた。「部分を持つのであればさらに分解できるだろう」というところでしょうか。</p>

<h3 id="section-9">点だと無限大に発散する</h3>

<ul>
  <li>電磁場において、力の強さは距離の二乗に反比例する。</li>
  <li>電子は負の電荷を持つため、運動（電荷の移動）は電磁場に影響を与える。</li>
  <li>電子は電荷を持つため、電磁場から影響を受ける。</li>
  <li>電磁場発信者と受信者を区別せずに全てに影響を及ぼす。</li>
</ul>

<p>これらを組み合わせると、電子は自身の移動によって変えられた電磁場によって、電磁場から受ける力によって自身の運動に変化が起きる（運動しにくくなる）。その際、電子が点だとすると距離の二乗が０になり、力の強さが無限大になる。</p>

<p>また、F=maの式から質量は動かしにくさと言われているので、こうなると電子の質量が無限大に発散することになってしまう。</p>

<h3 id="section-10">点を諦めない「くりこみ」</h3>

<p>無限大は困るので、「電子には固有の質量がある」とみなして、その固有の質量をマイナスの無限大と置くことで電磁場の無限大を相殺しようというというアイデアが考えられた。これは場当たり的だがうまく機能した。（重量を考える際には使えなかった）</p>

<h3 id="section-11">光子による電磁場の変化</h3>

<p>電子が電磁場を変化させるということはエネルギー、光子を放出してること。電子の運動が電磁場によって影響を受けることは、電子が光子を吸収してるということ。</p>

<h4 id="section-12">不確定性原理</h4>

<p>ミクロの世界では質量が</p>

<h4 id="section-13">線による回避</h4>

<p>質量が一点に集中する</p>

<h2 id="section-14">ミクロの世界の構成要素</h2>

<h3 id="section-15">大別</h3>

<p>素粒子の標準模型では、電子、ニュートリノ、クオークなど物質の因子となるフェルミオンと、
電磁気力、重力、グルーオン、ヒッグス粒子など力を伝えるボゾンに分けられる。</p>

<h3 id="section-16">物質</h3>

<h4 id="section-17">原子</h4>

<p>分子の構成要素。原子核と電子からなる。</p>

<h4 id="section-18">陽子・中性子</h4>

<p>原子の原子核の構成要素。原子よりはるかに小さい。</p>

<h4 id="section-19">電子</h4>

<p>負の電荷を持つ。原子核よりはるかに小さい。</p>

<h4 id="section-20">クオーク</h4>

<p>陽子・中性子の構成要素。</p>

<h4 id="section-21">ヒッグス粒子</h4>

<p>物質に質量を与えるとされるヒッグス場の構成要素。</p>

<p><a href="http://gigazine.net/news/20131009-what-is-the-higgs/">雪に例える</a>とわかりやすいとか。</p>

<h4 id="section-22">ニュートリノ</h4>

<p>電子、クオーク以外の物質。</p>

<p>物質の衝突において、衝突後の物質とエネルギーを全て集めても衝突前より少なくなってしまったことから、その粒子の存在が予見されていた。</p>

<p>非常に小さな質量を持ち、光速に近いスピードで動くとされている。</p>

<h3 id="section-23">エネルギー</h3>

<h4 id="section-24">電磁気力</h4>

<p>後述のエネルギー以外は全て電磁気力。</p>

<p>光子のやりとりによって生じるとされる。</p>

<h4 id="section-25">強い力</h4>

<p>クオークをつなぎとめて陽子や中性子にする力</p>

<p>グルーオンのやりとりによって生じるとされる。</p>

<h4 id="section-26">弱い力</h4>

<p>原子核からの放射能の原因となる力。（僕はあまり理解できていない）</p>

<p>w粒子、z粒子のやりとりによって生じるとされる。</p>

<h4 id="section-27">重力</h4>

<p>物質同士が引き寄せ合う力。</p>

<p>重力子のやりとりによって生じるとされる。</p>

<h2 id="section-28">超弦理論</h2>

<h3 id="section-29">弦理論</h3>

<p>先述の、素粒子は点ではなく線だと考える理論</p>

<p>これはエネルギーを媒介するもの（ボゾン）しか考慮していなかったが、物質の因子（フェルミオン）も弦の振動状態として体系立てたのが超弦理論。</p>

<p>（このあたりは理解はできてないです。）</p>

<h4 id="section-30">超空間</h4>

<p>ボゾンは空間にいくらでも粒子を詰め込める。フェルミオンはそうはいかない。
ボゾンは普通の数で扱えるが、フェルミオンはふたつ入れたら0になるようなグラスマン数を導入することになる。</p>

<h4 id="section-31">超対称性</h4>

<p>自然は対称性を持つ。
超空間でも成り立つように拡張したのが超対称性</p>

<h3 id="section-32">ゲージ理論</h3>

<p>理解できなかったので省略</p>

<h3 id="section-33">光子は質量がないことの説明</h3>

<p>質量は動かしにくさであり、光速で動く光子には質量が存在しないはず。</p>

<p>しかし不確定性原理により、位置エネルギーと運動エネルギーが同時に決まらず、平均を求める必要が出てくる。</p>

<p>平均を求める際に「ゼータ関数」と「解析接続」というのを使うと、25次元のときのみ質量がゼロになることがわかった。（オイラーが考えた<a href="http://ja.wikipedia.org/wiki/1%2B2%2B3%2B4%2B%E2%80%A6">この式</a>は僕には理解できないが、自然数の和でなく特定の値におけるゼータ関数とみなすべきっぽい。）</p>

<h2 id="section-34">マクロの世界のあらゆるものは幻想</h2>

<p>ミクロな世界では原子と真空しかない。</p>

<h3 id="section-35">温度</h3>
<p>分子の振動によるエネルギーにすぎず、温度という概念はミクロにはない。</p>

<h3 id="section-36">空間</h3>

<p>空間とは、近いものと遠いものの区別がつくような集合を言う。</p>

<h3 id="section-37">時間</h3>

<p>相対性理論において絶対的な時間はない。</p>

<h3 id="section-38">元素</h3>

<p>近年では原子の衝突によって金を錬成することも可能になっている。（もちろんコストがハンパないのでやらないが。）</p>

<h3 id="section-39">色</h3>

<p>電磁波の一部である光の波長が人間の目の可視域にあるときに認識できるもの。
「赤」は「650nmあたりの波長の光線」のシノニムとして「赤」という単語を当てているに過ぎない。</p>

<h2 id="section-40">メモ</h2>

<h3 id="section-41">縦波と横波</h3>

<p>縦波は進行方向の波なので区別しにくい。
光には横波しかなく、音には縦波しかない。地震波は両方ある。</p>

<p>超弦理論では開いた弦は電磁気力を伝えるとされていて、横波しか運ばないので理にかなっている。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日本文化と空間認識]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/06/how-to-grab-the-world/"/>
    <updated>2015-05-06T16:23:46+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/06/how-to-grab-the-world</id>
    <content type="html"><![CDATA[<p>科学未来館でチームラボ展に行ってみたり、DVDで作品を見たりしていたので、
そこから過去の日本人の思想を個人的にまとめてみました。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4838726317/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/616Qk4SU8sL.jpg" width="355" height="500" alt="チームラボって、何者? [DVD付]" title="チームラボって、何者? [DVD付]" /></a></p>

<h2 id="section">序章</h2>

<ul>
  <li>パースペクティブ・・・縦横高さの３Dモデルの見方、写実的</li>
</ul>

<p>現代人は世界をパースペクティブで認識していると言っていいでしょう。
これは単に西洋文化が入ってきただけでなく、多くのCG技術や写真などのテクノロジーの発達によるものが大きいのでしょう。</p>

<p>ところが、現代人が改めて日本画を見るとどうも平面的に見えてしまいますよね。
これは当時の日本人の絵の技術がなかったからでしょうか。
もしかすると当時の日本人は本当に日本画のような世界が見えていたのかもしれない。
少なくとも日本画を愛でる文化があった時点で、日本画の描く論理構造の世界を認識できていたと見るのが普通ではないでしょうか。</p>

<p>そういうことを考えてアート作品として昇華させたチームラボの作品を見て、当時の日本人の視点、価値観を考えてみます。</p>

<h2 id="section-1">チームラボから読み取れるもの</h2>

<h3 id="section-2">日本画的な視点はありえるか</h3>

<blockquote>
  <p>DVD5 「花と屍 剝落 十二幅対」</p>
</blockquote>

<p>この作品は、当時の日本人は世界が本当に日本画のように見えていたのではないかという仮説のもと、一旦正しい寸法（パースペクティブ）で３Dモデルを作ったあと、そのまま画面に描画するのではなく独自の論理変換（レンダリング）を行って画面に表示してみることで、当時の日本人の視点を理解してみようという試みだと推測されます。</p>

<p>この作品のキモは、正しい寸法（パースペクティブ）を見ていても日本画のように認識できそうだ、ということを証明したことと、その論理変換のロジックにあると思います。
論理変換の内容については、猪子さんの動画のところで詳しく書きます。</p>

<h3 id="section-3">時間</h3>

<blockquote>
  <p>DVD４ 「憑依する滝」</p>
</blockquote>

<p>この作品は、当時の日本人の認識する時間が現在よりもゆるやかだったのではという仮説のもと、
写真の露光時間を長くするように水の粒子の軌道を残してみることで、実物よりダイナミックな滝が描けるのではないか、という試みだと推測されます。</p>

<p>日本画っぽく見えるかは怪しいところですが、当時の日本人の認識する時間が遅かったのでは、という仮説はおおいにありえそうなので後で少し触れます。</p>

<h3 id="section-4">視点</h3>

<blockquote>
  <p><a href="https://www.youtube.com/watch?v=2szRkXyCxss">日本文化と空間デザイン～超主観空間</a></p>
</blockquote>

<p>西洋の絵は、中世のころには既にパースペクティブを活かした作りになっています。例えばモナリザの絵は見る人とモナリザとが向かい合っている構図になっています。モナリザの視点に立つと当然見る人が目の前に見えるかたちになってしまうので、絵の中にはいることはできません。</p>

<p>一方日本画は、パースペクティブの描き方をしていないので見る人が絵の中に入り込むことができるのではと推測しています。</p>

<p>例をいくつか挙げています。（メタルギアは僕が勝手に載せました。。）</p>

<ul>
  <li>マリオ・・・横スクロールの２Dの世界ですがちゃんと空間をイメージできます。</li>
  <li>ドラクエ・・・主人公が歩く世界を俯瞰的に見てプレイしているけども登場人物になりきれます。</li>
  <li>メタルギア・・・カメラの位置を変えることで、本来主人公からでは見えない位置も見えています。</li>
</ul>

<p>対してアメリカのゲームは主人公目線の３Dモデルが大半です。（具体的なタイトルは知らない。）</p>

<p>さて、パースペクティブの見方が浸透している現代人から見ると、それ以外の視点を持てることを想像することは難しいように思います。</p>

<p>しかしよく考えると、別の視点を持つことは可能なのです。</p>

<p>改めて自分の目で認識している世界を考えると、思ったより狭くて浅いです。見る対象とみなしてない物体は、視界には入っているはずなのに見えなかったりするでしょう。
しかし、僕らは今視界にない世界（自分の後ろとか）であってもおおよそ認識しています。それは脳が過去に見たものを繋ぎあわせて、あたかも３Dを作るようにモデル化しているからです。そのつなぎ合わせる作業が先述の論理変換だとすれば、パースペクティブで繋ぎ合わせる以外にも別の実装をしていても不思議ではありません。</p>

<p>その実装の一つが日本画的な論理変換で、当時の日本人がそれを実装しているとしたらつじつまが合います。</p>

<h3 id="section-5">非実在文化</h3>

<p><a href="http://gqjapan.jp/column/column/%E7%8C%AA%E5%AD%90%E5%AF%BF%E4%B9%8B/20140611/trotting-arround-asia-133">日本の文化は「非実在文化」、そして、本当は、情報社会と相性が良い──日本、アジア、そして21世紀</a></p>

<p>欧米はスーパーマンにしろレディーガガにしろ実在文化で、表現者と消費者の区別がはっきりしています。</p>

<p>対して日本は非実在文化と言えます。人形浄瑠璃や歌舞伎の女形、織田信長が自身も演じたとされる能「敦盛」など。近年では初音ミクをはじめとする二次創作の文化が注目されています。
これらに共通するのは対象のキャラクターが非実在なため、誰が演じようが自由で主体と客体があいまいであることです。</p>

<h2 id="section-6">考察</h2>

<p>以上をベースとして、当時の日本人の価値観を説明してみます。</p>

<p>テーマは共生です。</p>

<h3 id="section-7">神道</h3>

<p>（どうでもいいですが、「神道（シントウ）は濁りと穢れを忌む」からシンドウとは読まないそうです。。）</p>

<p>日本は自然災害の多い国と言えるでしょう。</p>

<p>周りが海であることによる津波や潮の満ち干き、プレートをまたいでいて地震も多く、活火山もたくさんある。
また四季があるため一年を通して様々な自然現象が起きる。</p>

<p>こういった環境で、日本人は自然に恐怖しつつも共生するという姿勢を取る必要があり、それによって八百万の神を崇拝対象とする神道が生まれたのではないでしょうか。</p>

<p>そう考えると、絵の中に自分が入れること、主体と客体が入れ替わることも腑に落ちます。</p>

<h3 id="section-8">全体主義・村社会</h3>

<p>自然と共生するにあたって周囲の人間と協力することもまた重要です。自然の変化は個人で対応できる範囲を超えているからです。</p>

<p>また、自然と共に生きる、あるいは生かされているため「俺が俺が！」という姿勢が薄く、自然においての自分たちのあるべき姿を守ろうという姿勢が強かったのではと思います。</p>

<p>そのため、個よりも全体を感じる絵になったり、表現者が個人の権利を主張するよりも全体で楽しむといった点に注力されて二次創作が流行ったりしたのではないか。</p>

<p>また、その思想は全体主義にも繋がりそうです。集団の規律から外れる者には厳しかったり、国のためなら個を犠牲にするといった価値観であったり。</p>

<h2 id="section-9">まとめ</h2>

<p>日本は良くも悪くも社会主義的な文化が残っているから、文明開化後の西洋文化の流入を受けてもある程度独自性を持っているのではないかなと。</p>

<p>ただそういった文化は言語外の部分なので、西洋的な価値観に染まっている若者からするとチグハグで息苦しい国に思えるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暗号技術入門]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/03/encryption-technology/"/>
    <updated>2015-05-03T11:39:23+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/03/encryption-technology</id>
    <content type="html"><![CDATA[<p>結城先生の暗号技術入門書。雑なメモ書きを残しておきます。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51evnioBHsL.jpg" width="354" height="500" alt="新版暗号技術入門 秘密の国のアリス" title="新版暗号技術入門 秘密の国のアリス" /></a></p>

<h1 id="section">暗号技術入門</h1>

<h2 id="section-1">概要</h2>

<h3 id="section-2">暗号化の目的</h3>

<ul>
  <li>機密性の確保</li>
  <li>改竄の防止 正真性</li>
  <li>本人の操作の証明 署名</li>
</ul>

<h3 id="section-3">暗号技術で用いられる技術一覧</h3>

<ul>
  <li>対象暗号</li>
  <li>公開鍵暗号</li>
  <li>一方向ハッシュ</li>
  <li>乱数生成</li>
  <li>デジタル署名</li>
  <li>メッセージ認証</li>
</ul>

<h2 id="section-4">過去の暗号</h2>

<p>ソフトウェア以前のもの。いずれも共通鍵を必要とする。</p>

<h3 id="section-5">シーザー暗号</h3>
<p>総当たりに弱い</p>

<h3 id="section-6">単一換字</h3>
<p>総当たりに強い。アルファベットだけでも26！通り</p>

<p>頻度分析に弱い</p>

<h3 id="section-7">エニグマ</h3>
<p>戦時中に活躍。</p>

<p>事前に共有した鍵でローターを設置して、通信の始めの文字でワンタイムの鍵を暗号化して送信。その後暗号を復号化する。</p>

<p>問題</p>

<p>ワンタイムの鍵を考えるのが人である。
複数の暗号化されたワンタイム鍵から、その日の共通鍵を導出できた。</p>

<h2 id="section-8">対象暗号</h2>

<h3 id="section-9">使い捨てパッド</h3>
<p>その平文の長さに合わせたランダムな01のマスクをかける。
01の全てのパターンになりうるため、鍵を知らないと復号化は不可能。</p>

<p>ただし鍵を安全に送れるならパスワードも送れることになる。</p>

<h4 id="section-10">事前に一定長のマスクを送っておくことは可能か？</h4>

<p>！ 使い回すと解読が可能になってしまうが、そうでないなら有効か。</p>

<p>本文より長いマスクを事前に送っておけば、二度当てる心配もない。
長すぎて平文がどこまでかわからない、という問題は心配しなくてもわかるだろう。</p>

<h3 id="des">DES</h3>

<p>パリティチェックの仕組み。</p>

<p>トリプルDESは鍵が増えたというだけ？</p>

<h2 id="section-11">共通鍵暗号のモード</h2>

<p>使い捨てパッドでない限り鍵は本文より短くなる。
そのため、その暗号鍵を使いまわすパターンがいくつか存在する。</p>

<h3 id="ecb">ECB</h3>
<p>平文をブロックに切って繰り返し暗号化する。
それぞれのブロックで処理が独立しているため、
並列に復号化できるが、パターンが分かれば、復号化しなくてもすり替えられる。</p>

<p>固定長の使い捨てパッドを繰り返すのと同じ？</p>

<h3 id="cbc">CBC</h3>

<p>一つ前のブロックの暗号化したものとのxorを取ってから暗号化する。
始めのブロックには別途ランダムな値が必要。
隣のブロックの復号化に影響するため、単体の値の操作は困難。ただし初期化ベクトルは例外。</p>

<h3 id="cfb">CFB</h3>

<p>使い捨てパッドと同等らしい？</p>

<p>xorと暗号化の違い。
暗号化はアルゴリズムが任意。DESではラウンド関数と言うように。また、サブ鍵の長さに制限がない。</p>

<p>途中で差し替える再生攻撃ができてしまうため非推奨。</p>

<h3 id="ofb">OFB</h3>

<p>暗号文を繰り返し暗号化し、平文とのxorを取っていく。</p>

<p>暗号文のビットを反転させると対象の平文も反転する。</p>

<h3 id="ctr">CTR</h3>
<p>カウンターをかける。OFBよりも並列で処理できる。</p>

<h2 id="section-12">公開鍵暗号</h2>

<p>現在の一般的なアルゴリズムはRSA。</p>

<p>離散対数を求めることは難しいこと、大きな素数からなる数の素因数分解は難しいことを利用している。</p>

<h3 id="section-13">作り方</h3>

<p>大きな素数を2つ求める。
その素数をかけてnを作る。
素数引く1の最小公倍数をlとする。
lと互いに素である小さい数字をe
とする。
dを求める。</p>

<p>公開鍵ではnのmodをとるので、nより大きなデータは暗号化できない。</p>

<h3 id="section-14">なぜ解読が難しいか</h3>

<p>暗号文を平文にするロジックは離散対数をもとめる計算になる。</p>

<p>総当たり攻撃は、dが1024ビット相当になり数が多すぎる。</p>

<p>nはpqからできてることを利用してdを解読する。
大きな素数からなる数の素因数分解は難しい。</p>

<p>その他の攻撃手法は確立されていないが、例えば乱数精製機のムラをつく、別の方法でdを求める、などです。</p>

<h3 id="mitm">MITM攻撃</h3>

<p>中間者攻撃。</p>

<p>公開鍵暗号を使っても、用いる公開鍵が意図しない相手のものだった場合には意味がなくなる。</p>

<p>これを防ぐには、公開鍵が通信相手本人から送ったものだと証明できる必要がある。</p>

<h3 id="section-15">各種疑問</h3>

<p>全部公開鍵でいいのでは？
基本遅くなるので、共通鍵の暗号化に使うなどを行う。</p>

<p>素数ベアの枯渇、衝突
512ビットの素数は全宇宙に存在する原子より多い。</p>

<h3 id="section-16">一方向ハッシュ</h3>
<p>データの正真性を調べるのに用いる。
データ全てを比べる、というか二つの実データを持つことは困難なため。</p>

<p>出力はフィンガープリントとも呼ばれる。指紋ですね。</p>

<p>大容量のデータを扱う際など、ミラーサイトやプロキシを経由することがある。そのときに変な操作をされてないかを確認できる。もちろんハッシュ値は公式から取得する。</p>

<h3 id="section-17">メッセージ認証コード</h3>
<p>そのメッセージが本当に相手から送られてきたか？途中で改竄されてないかを判定する。</p>

<p>改竄については一方向ハッシュでもできる。
正しい相手からかを測るのに使う。</p>

<p>自分と相手だけが知っている情報を用いるため、第三者への証明（否認の防止）には使えない。</p>

<h3 id="section-18">デジタル署名</h3>

<p>第三者にも、そのメッセージが自分が作ったものだと証明できる。</p>

<p>rsaなど公開鍵暗号のアルゴリズムを使う。
対象鍵との比較みたいなもの。</p>

<p>ただ、メッセージ自体と別（意味がわからなくても同じだとみなせればいい）なのでハッシュ値の検証だけでよい。</p>

<p>署名はコピーされても構わない。普通は書類に通し番号とかついているので、同じものが複数あっても同一のメッセージとみなされるので問題ない。（再生攻撃の防止）</p>

<p>公開鍵暗号の暗号鍵と一緒のものを使うのはリスクがある。また、認証をかけるのはハッシュ値だけにするべき。</p>

<p>認証するための公開鍵自体を認証しなければいけない。</p>

<h3 id="section-19">認証局</h3>
<p>公開鍵自体の認証をどうするか、第三者にしてもらおう、ということで生まれた。</p>

<p>ある手続きで本人確認をして自分の鍵を登録できる。</p>

<p>受け取るときは、認証局の認証をつけた公開鍵(証明書)を受け取る。</p>

<h3 id="section-20">攻撃</h3>

<p>管理が移管されたなど、対象のドメインのキーが期限切れの場合がある。
そういった用途のため、認証局はCRLを持っている。</p>

<p>どこの情報を信用するかというのは根源的に難しい。</p>

<h2 id="ssltls">SSL/TLS</h2>

<p>暗号技術の詰め合わせ。暗号スイート
いろんなプロトコルで使える。</p>

<p>4つのサププロトコルを持つ。</p>

<h3 id="section-21">ハントシェイク</h3>
<p>認証と、共有鍵の取り決め。</p>

<p>使える暗号スイートを伝え合って決める。</p>

<h3 id="section-22">暗号仕様変更プロトコル</h3>
<p>暗号スイートの切り替え。</p>

<h3 id="section-23">警告プロトコル</h3>

<p>暗号化失敗の通知</p>

<h3 id="section-24">アプリケーションデータプロトコル</h3>
<p>中身を相手に伝える。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コンテンツの秘密]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/03/secret-of-content/"/>
    <updated>2015-05-03T10:48:19+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/03/secret-of-content</id>
    <content type="html"><![CDATA[<p>ドワンゴの川上さんが書いた、情報量、良いコンテンツの定義、などについて考察された本。</p>

<p>川上さんは、理屈より感覚と思われている抽象度の高い分野を体系立てる枠組みを考えるのがうまいなぁと感心していますが、本書はその最たる例です。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00VVKIBF4/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/5123YcrATOL.jpg" width="322" height="500" alt="コンテンツの秘密　ぼくがジブリで考えたこと (ＮＨＫ出版新書)" title="コンテンツの秘密　ぼくがジブリで考えたこと (ＮＨＫ出版新書)" /></a></p>

<p>クリエイター側と消費者側との両方の視点から述べられていましたが、
個人的に気になった消費者側の視点を主にまとめます。</p>

<p>いつもどおり、本書の内容と僕の考察とが入り交じっていますが、
僕の中では区別すべきものではなく、本を読んでアップデートされた自分の理解をまとめているだけに過ぎません。
例えるなら原作の二次創作的な位置づけです。</p>

<h2 id="section">コンテンツとはなにか？</h2>

<p>よく使われる邦訳としては「情報の中身」らしい。
中身に対して外側のことをメディアと呼ぶ。メディアの例は新聞、テレビ、CD、映画館などなど。</p>

<p>次に「情報」とは何かというと、（五感を通じて）受け手に知識や経験を付与するものといえるでしょう。</p>

<p>つまり「コンテンツ」とは、「メディア」のフォーマットに沿った形で「情報」として生成され、「五感」を通じて「受け手」に知識や経験をもたらすもの、としておきましょう。</p>

<p>構図としてはこんなかんじです。</p>

<blockquote>
  <p>情報　＝　コンテンツ + メディア</p>
</blockquote>

<blockquote>
  <p>受け手　←（五感）←　情報</p>
</blockquote>

<h2 id="section-1">なぜ人はコンテンツを求めるのか？</h2>

<p>さて、ではなぜ人はコンテンツを求めるのでしょうか。
言い換えると、なぜ人は情報のやりとりをしたがるのでしょうか。</p>

<p>一つの答えは、人間は現実世界の模倣が本能的に好きだからです。</p>

<p>子供の頃から、ヒーローごっこやおままごと、大人の話し方のマネなど、人間は何かを模倣することが好きです。
また、学問といったものも、世の中の事象をあるモデルに落としこむことなので、再現可能な形に模倣していると言えます。
人間はこれらを通じて、災害への予防や人付き合いの作法といった生きる術を身につけるようになっているのではないか。
そのため、知的好奇心などと言い表されるように、人は他者の考えたモデルを知りたいために情報を求めます。</p>

<p>発信者も同じように、自分の理解しているモデルが正しいことを証明したい、あるいは間違いがないか周りに問いたくなるものです。</p>

<p>近年の日本では、今まで以上に情報が氾濫しているように見えます。これは、技術の進歩によりただ生きていくことのコストが減ってきたため、食欲などの次欲求として知的好奇心の充足（情報の摂取）を求めるからではないでしょうか。</p>

<h2 id="section-2">良いコンテンツとはなにか？</h2>

<p>さて、ここまで情報（コンテンツ）の定義と必要性について述べてきました。</p>

<p>それに沿うと、コンテンツとは、</p>

<blockquote>
  <p>受け手の「現実の模倣」の精度を上げるような、「現実の事象のモデル化」を提供すること</p>
</blockquote>

<p>であり、良いコンテンツとは、その精度がより上がるもの、ではないかと推測できます。</p>

<p>現実の事象のモデル化については、詳しく受け手の「現実の模倣」の精度を上げるは後述しますが、人間の脳の処理性能上シンプルなものを好む傾向にあるようです。つまり、よりシンプルなモデルで正しく現実の模倣ができることが理想なのです。</p>

<p>それでは、本書に載っている例をはじめ色々なサンプルを通じて、良いコンテンツの定義が的を射ているかどうかを検証してみます。</p>

<h3 id="section-3">「情報量」という指標</h3>

<p>アニメーション業界には「情報量」という指標があるそうです。
業界での情報量の一般的な定義は「線の数」です。</p>

<p>線が多いと描くのが大変で見る方も疲れるが、現実に近い細かな記述ができる。逆に線が少ないと描くのが楽で特定の事象にのみフォーカスできるものの、見る方は飽きやすい。</p>

<p>といった作りこみの指針として使われているそうです。</p>

<p>動画関連のクリエイターの間では、</p>

<blockquote>
  <p>実写　＞　細かい絵　＞　シンプルな絵</p>
</blockquote>

<p>の順に情報量が増えていくと言います。（これはデジタルの圧縮技術をかじっていれば、圧縮しにくさと言い換えてもいいでしょう。）</p>

<p>ジブリ作品が人気なのは、絵が細かく情報量が多いため何度見ても飽きないから、と言われることもあるそうです。</p>

<p>しかし、単純に情報量を増やすといいのかといえばそうでもないようです。
実写でもアニメより面白くないものは多いですし、シンプルな絵が人気が出ることも多いです。</p>

<p>どうやら情報量という指標はコンテンツの良い悪いに関連はありそうなものの、比例関係とまではいかないようです。</p>

<p>ここで川上さんは「情報量には主観的なものと客観的なものがあるのでは」と推測します。
（こういう発想ができるのがすごいです。）</p>

<p>その分類を用いると、自分が有用だと感じる情報（主観的情報）は、先述の「現実の模倣の精度を上げること」と言えそうです。</p>

<p>それに関係ない枝葉の情報がくっついてしまうと、模倣のモデル化が複雑になり、脳が処理しきれなくなってしまうため、一般に面白くないコンテンツと言えるのではないでしょうか。</p>

<h3 id="section-4">絵や写真におけるぼかしの技術</h3>

<p>いい写真と感じるものの中に、背景などを綺麗にぼかしているものがあります。
本来、これはカメラの仕組み上避けられない制約なのですが、うまく使うと「良い写真」と呼ばれるものになります。</p>

<p>ここから推測するに、「良い写真」とは、作り手が表現したい対象物を的確に認識させる、かつ不要な情報（ノイズ）が少ないこと、と言えるのではないでしょうか。</p>

<h3 id="section-5">人間の脳の容量の限界</h3>

<p>人間は五感で得た情報を全て記憶しようとすると、５分と持たず容量の限界を迎えるそうです。（脳科学の本に書いてあったはず。。）
つまり脳は日々受け取る膨大な情報の中から、これは有用だと思えるものだけを取捨選択して記憶しているのです。</p>

<p>では、脳はどういった基準で取捨選択しているかといえば、やはりよく使われるものでしょう。</p>

<p>暗記をするには、繰り返し勉強するといいそうですね。
これは短期記憶に格納されている情報を何度も引き出す過程において、脳が「これは頻繁に使われるから覚えなくては」と判断し長期記憶に格納するからだと言われています。</p>

<p>同様に、あるシンプルなモデル化で色々な事象を説明できる場合、何度もそのモデル化情報にアクセスすることになるので当然長期記憶に移行されます。
脳からしてみれば記憶領域の消費が少なくても多くの事象への洞察を行うことができて便利なわけですね。</p>

<h3 id="section-6">機械のディープラーニング</h3>

<p>先ほどの推測した脳の仕組みは、機械学習で流行っている「ディープラーニング」の仕組みと似ています。</p>

<p>これは、</p>

<ul>
  <li>ある類似の事象を与えてパターンを抽出させる。</li>
  <li>パターンができると、それに照らしあわせて先ほどの事象を再現することができるかをチェックする（情報の圧縮・オートエンコード）</li>
  <li>精度にズレがある場合、パターン化をやりなおす。</li>
</ul>

<p>というプロセスを踏むことで精度を高めていきます。</p>

<p>ここでいう「パターン」は、先ほどから話している「現実のモデル化」と同じものと考えられます。
つまり人間の脳の記憶の仕組みを真似ている形になります。</p>

<p>実際に、膨大な画像を機械にぶちこむことで、「ネコ」と検索するとネコの画像が表示されるようになった、といった実験結果はいくつかあるそうです。（雑な説明ですが。。）</p>

<p>では機械に人間と同様の判断が出来るようになるかというと、まだしばらくは難しいのではと個人的には思っています。
というのも人間が「ネコ」を認識するのは静止画だけではないからです。</p>

<p>動きを見て四肢の使い方を推測したり、ライオンなどの類似の生物を見て獰猛さを推測したり、豆腐や鉄の触り心地と比べてどのくらい柔らかいかを推測する、といった部分ができるようになれば、かなり人間に近いモデル化ができるのではと個人的に思っています。</p>

<h3 id="section-7">デフォルメ</h3>

<p>アニメなどではよくデフォルメの技術が使われています。</p>

<p>殴られたら現実以上に吹っ飛んだり血が出たり、現実ではありえないほど小さすぎるキャラやボンキュッボンすぎるキャラがいたり、俗にマンガ肉と言われるような、骨付きの巨大な肉があったり。</p>

<p>ジブリの「風立ちぬ」でも、外国人のキャラクターを書くときに、モデルとなっている人の特徴を考えて、
鼻が大きいということからあの顔にしたのだとか。</p>

<p>また、江戸時代のころから「鳥獣略画式」というものがあり、単純な線でネコや犬を表現するといった手法が取られていたようです。</p>

<p>これも「モデル化」と言えます。より少ない情報源で表現できるのがいいのです。</p>

<h3 id="section-8">うまい絵とは写実的な絵ではなく主観的に気持ちいい絵</h3>

<p>トトロが流行ったのは、トトロのお腹が柔らかくて気持ちよさそうだからだ、とジブリの鈴木さんは言っているそうです。
また、宮崎駿さんは飛行機を実物よりも大きく書くのだとか。</p>

<p>脳は現実そのままを認識しているわけではないと書きましたが、これらも同様で、
実物よりもリアルに見える絵（受け手の脳の認識と近い絵）というものがあるようです。</p>

<p>猫を書くのがうまい人は、猫のやわらかさとか可愛さをうまく表現できる人。
小道具を使ったりありえないポーズを使っていても問題ないのではないか。</p>

<p>他にも、ジブリの手法で言うと、
背景をたくさんみせたかったら現実を歪めて隠し、裏に隠れているものが見せたかったら無理にでも絵に収める。逆に、見ても表現したいものと関係のないものは現実には見えているはずでも消してしまう、
などといったテクニックが使われているそうです。</p>

<h3 id="section-9">なぜ人によって良いコンテンツが違うのか</h3>

<p>「受け手の現実の模倣の精度を上げる」という点から考えると、その受け手の捉えている現実によって良いコンテンツが違ってくるのは当然です。</p>

<p>例えば、日本では蚊は怖くないですが、マラリアなどの感染症に苦しむ地域では死神のようなイメージがあるかもしれません。
大人と子どもでも、現実の理解度や社会をどこまで知っているかによって、趣味趣向が異なってきます。</p>

<p>ジブリ作品でも、人によっては「あんな高さから落ちて生きてるなんて馬鹿げている」とか、「難しすぎてよくわかんない」なんてことがあるでしょう。</p>

<h3 id="section-10">分かりそうでわからないもの</h3>

<p>これは川上さんがずっと考えている「良いコンテンツの定義」です。</p>

<p>これはおそらく、自分の中の気づかなかったモデル化のヒントを与えてくれるものではないでしょうか。</p>

<p>モデル化を全て説明してしまうと、人によってはすごく納得すたりちょっと違うと感じるでしょうし、そもそも結論が出てしまったのでこれ以上の議論は不要になります。</p>

<p>そこを少しだけ謎を残しておくと、口コミで話題になったり、二次創作が発生したり、続編を期待したり、といった「商売としての良いコンテンツ」になるのではないでしょうか。</p>

<h2 id="section-11">まとめ</h2>

<p>良いコンテンツは以下のように解釈してもよさそうである。（※ただし商売上の良いとは異なる。）</p>

<blockquote>
  <p>受け手の「現実の模倣」の精度を大きく引き上げるような「現実の事象のモデル化」を提供すること</p>
</blockquote>

<p>この定義に納得できるのであれば、この文章はあなたにとって多少は有意義だったのでしょう。</p>

<h2 id="section-12">おまけ</h2>

<h3 id="section-13">芸術とデザインの違い</h3>

<p>前々からこの２つの類似性を考えていたのですが、現時点での解としては、</p>

<blockquote>
  <p>芸術は特定の受け手へ大きな知見を与えることを意図したもの、デザインは多くの人へ簡潔な知見を与えることを意図したもの</p>
</blockquote>

<p>と考えています。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[別マシンを使ってクライアントサイド開発]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/18/develop-clientside-with-server/"/>
    <updated>2015-01-18T14:31:10+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/18/develop-clientside-with-server</id>
    <content type="html"><![CDATA[<p>最近のクライアントサイド開発がリッチになったおかげで、僕のノートPCだとビルドとかに時間かかるようになってしまったので、その対応のお話。</p>

<!--more-->

<h2 id="section">問題提起</h2>

<p>クライアントサイドの開発で、Reactを使うと必然的にwebpackなどのモジュール管理ツールが必要になったり、逐次動作を確認したいので仮サーバー（SimpleHttpServerやgulp-webserverなど）を立てたりすると思います。</p>

<p>が、僕のノートPCが低スペックなおかげで、これらをやりながらEditorとブラウザを立ち上げてると発熱がヤバイです。</p>

<p>ということで、ビルドや仮サーバーの処理を外部マシンにやってもらうことでノートPCの負荷を軽くしようと考えました。</p>

<p>なお、以降は、</p>

<ul>
  <li>HostPC ： ブラウザやコードをいじるメインのPC。今回だと低スペックのノートPC。</li>
  <li>GuestPC ： ビルドなどの処理用PC。GUI要らない。</li>
</ul>

<p>と呼ぶことにします。</p>

<h2 id="section-1">ゴール</h2>

<ul>
  <li>HostPCはブラウザとEditorのみを開き、HostPCのコードを編集する。</li>
  <li>GuestPCは、HostPCで編集されたコードをビルドして仮サーバーを立てる。</li>
</ul>

<p>そのために、</p>

<ul>
  <li>GuestPCにHostPCのソースコードを同期できる。</li>
  <li>GuestPCのgulp-webserverにHostPCからアクセスできる。</li>
</ul>

<p>を構築します。</p>

<h2 id="section-2">構築開始</h2>

<h3 id="guestpchostpc">GuestPCにHostPCのソースコードを同期</h3>

<p>今回の例だとGuestPCはただの負荷分散用で、必要なときに必要なスペックだけ調達したいので、このPCでコードを管理しておくことは想定しません。</p>

<p>ということでソースコードはHostPCにあります。</p>

<p>そこからGuestPCへファイルを転送するには、<code>rsync</code>を使います。使うには、GuestPC、HostPCのどちらにもrsyncをインストールするだけです。</p>

<p>そして、HostPCでこんな感じのコマンドを打ちます。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rsync -arvz -e ssh /hostPC/path/to/target guestPC@XXX.XXX.XXX.XXX:/home/guest/folder</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>これで転送できます。
オプションは調べてください。（–deleteをつけてしまうとGuestPCでbuildしたものが消えてしまうので付けないほうがいいです。）</p>

<p>パスワードを聞かれるのが嫌なら、GuestPCにHostPCの公開鍵を入れておきましょう。「ssh パスワードなし」とかでググればあります。</p>

<p>ちなみに、始めは全て転送しますが、その後の変更は差分だけで済むようです。
数十MBのフォルダで試しても転送量と速度は気になりませんでした。</p>

<h3 id="guestpcgulp-webserverhostpc">GuestPCのgulp-webserverにHostPCからアクセス</h3>

<p>開発用の仮サーバーは自分自身のアクセスしか受け付けないことが多いです。その場合、HostPCから閲覧できなくなってしまうので、プロキシサーバを立ててリバースプロキシさせる必要があります。</p>

<p>今回はnginxを使うことにします。</p>

<p>GuestPC側でnginxをインストールし、<code>/etc/nginx/nginx.conf</code>あたりの設定ファイルを編集します。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">http {
</span><span class="line">    server {
</span><span class="line">        listen       8000;
</span><span class="line">        server_name  localhost;
</span><span class="line">        location / {
</span><span class="line">          proxy_pass http://localhost:8001/;
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">    server {
</span><span class="line">        listen       8080;
</span><span class="line">        server_name  localhost;
</span><span class="line">        location / {
</span><span class="line">          proxy_pass http://localhost:8081/;
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>設定ファイルを編集したら<code>sudo service nginx restart</code>で再起動。</p>

<p>こんな感じで設定してあげると、HostPCからhttp://GuestPC:8001にアクセスするとGsudo service nginx restartuestPCでポート8000番で立ってる仮サーバーにアクセスできます。今回のサンプルでは、同様に8081番にアクセスすると8080で立ってるサーバーに転送されます。</p>

<h2 id="section-3">まとめ</h2>

<p>以上で、GuestPCにHostPCの開発環境を移すことが出来ました。
どうしてもIDEなどが欲しい昨今において、この構成はいいんじゃないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nexus５からiphone５に戻した理由]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/10/nexus-to-iphone/"/>
    <updated>2015-01-10T15:35:17+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/10/nexus-to-iphone</id>
    <content type="html"><![CDATA[<p>二年経つのでiPhone5からNexus5に変えたんだけど、やっぱり使いづらくて1ヶ月で元に戻しました。</p>

<!--more-->

<h3 id="section">経緯</h3>

<p>iPhone5二年契約が切れたタイミングで、格安Sim＋Nexus５にしようと画策。</p>

<p>Nexus5を購入しメイン機へと移行。</p>

<p>ついでに、外でPCを使うことが増える予定なので、ネット使い放題のWimaxにしたいなと思ってキャンペーン中に契約してしまう。</p>

<p>Nexus5をメインにして1ヶ月ほど使うも、色々と使いづらかった。</p>

<p>Wimaxにしちゃったので、2年使い古したiPhone5でも問題なくなったので、結局iPhone5に戻った。</p>

<h3 id="section-1">使いにくいところ</h3>

<h4 id="section-2">イヤホンと連携できない</h4>

<p>iPhoneの場合は純正のイヤホンでボリュームやOn/Offを操作できるのですが、Nexusだとそういった操作に難があるようです。</p>

<p>一応別のイヤホンだったりアプリを使ってうまく行くケースもあるらしいのですが、僕が試した範囲では全部ダメでした。</p>

<h4 id="section-3">ポケットに引っかかる</h4>

<p>素材・大きさのせいか、ポケットにすっと入らない場合が多いのです。</p>

<p>また、イヤホンジャックが上向きに付いてるので、イヤホン装着時にはなおさらめんどくさかったです。</p>

<h4 id="section-4">アプリが不安定</h4>

<p>使用頻度の高い一部のアプリが、Nexusだと固まったり通信エラーが頻発したりしていました。</p>

<p>代わりにどこか機能が良くなってたり、無料で良い物があったり、、、は特になかったです。</p>

<h4 id="section-5">電池の消費が激しい</h4>

<p>結構深刻な問題。
各種レビューサイトでも指摘されてますが、常に残量を気にしないといけないので非常にストレスフルでした。</p>

<h4 id="section-6">バッジの通知ができない（デフォルトでは）</h4>

<p>iPhoneでよくある、メールやLineの未読通知のバッジが、Androidだとありません。</p>

<p>カスタマイズして一部使えるようになりましたが、それも不安定/サポートしてないのが多い、のでダメでした。</p>

<h4 id="section-7">自分でフォルダを操作しないといけない</h4>

<p>良い点になるかもしれないのですが、これも結構めんどくさい。</p>

<p>各種アプリによって走査のされかたも均一でないっぽくてフォルダ構成やメンテナンスに苦労する割に、あまりメリットを得られませんでした。</p>

<h3 id="section-8">その他考慮したこと。</h3>

<h4 id="apple">アプリもまだappleが優勢</h4>

<p>数もそうですが、試した範囲では質が結構違った。</p>

<p>iPhoneだと環境が統一されているからか、質のいいアプリはiPhoneからしかでてなかったりする。</p>

<p>Androidは、どっかの会社が製品のおまけでとりあえず作りました、みたいな残念なアプリはいっぱいある印象。</p>

<h4 id="section-9">処理性能は気にならない</h4>

<p>iPhone5はもう二年前のだし、スペックをみてもNexus5の方が上なのですが、
そもそもボトルネックがネットワークなので性能はもう十分なんですよね。</p>

<p>（性能が問題になるとしたら、OSのアップデートくらいでしょう。）</p>

<h4 id="section-10">画面サイズもどっちでもいい</h4>

<p>Nexus５くらいのサイズがいいなと思ってたんですが、慣れのせいかタイピングがけっこうミスる。</p>

<p>あと画面がデカイといっても微妙な差なのでほとんど変わらなかった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[就職しない生き方]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/10/not-employment-life/"/>
    <updated>2015-01-10T12:38:21+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/10/not-employment-life</id>
    <content type="html"><![CDATA[<p>ちょっと古いですが、雇用されない生き方について。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B009K244BK/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41EyzlDf7rL.jpg" width="350" height="500" alt="就職しない生き方 ネットで「好き」を仕事にする10人の方法" title="就職しない生き方 ネットで「好き」を仕事にする10人の方法" /></a></p>

<h3 id="section">感想</h3>

<p>まずは生計を立てること。
それができてから自己実現を。</p>

<p>自由になるためにはそれなりの義務を伴う。（お金・人・責任感 etc…）
その程度をどこにおくは人による。</p>

<p>例えば完全に自由に生きたい人は、自分に合わせてくれる仲間を持てるだけの魅力や、生活出来るだけの資金をどこかから集める必要がある。</p>

<p>そこまで自由でなくてもいいから簡単に生活したい人は、とりあえず安定したところに勤めて土日などで趣味に興じるというのもあり。
その趣味がお金になりそうだな、となってから徐々に趣味の比率を大きくしていけば良い。</p>

<p>最近はインフラが整ってきたおかげで、</p>

<ul>
  <li>Try&amp;Errorのコスト（時間・お金）が減った。</li>
  <li>最低限生きていくのに必要なコストが減った。</li>
</ul>

<p>ので、過去よりも自由に生きられるように思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[why react]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/10/why-react/"/>
    <updated>2015-01-10T11:52:49+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/10/why-react</id>
    <content type="html"><![CDATA[<p>Reactの何がいいのかについて、Qiitaに投稿しました。</p>

<p><a href="http://qiita.com/uryyyyyyy/items/83d75cf79a9202f36cb5">React.jsはMVCのVじゃない。フレームワークだ。</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressの再セットアップ]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/10/octopress-reinstall/"/>
    <updated>2015-01-10T11:52:42+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/10/octopress-reinstall</id>
    <content type="html"><![CDATA[<p>octopressの再セットアップについて、Qiitaに投稿しました。</p>

<p><a href="http://qiita.com/uryyyyyyy/items/83d75cf79a9202f36cb5">Octopressの再セットアップで嵌ったのでメモ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[起業のリアル]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/10/real-of-starting-bussiness/"/>
    <updated>2015-01-10T10:52:02+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/10/real-of-starting-bussiness</id>
    <content type="html"><![CDATA[<p>いろんなベンチャー社長に、「なぜ」を聞きまくるお話。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B00LGIBK2W/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41lxk0j0HTL.jpg" width="346" height="500" alt="起業のリアル" title="起業のリアル" /></a></p>

<h4 id="section">差別化はしない。</h4>
<p>差別化しなきゃいけないというのは顧客でなく他社を見ている。あくまで顧客志向で王道を進むべき。</p>

<h4 id="section-1">なぜその仕事をするのか。</h4>

<p>儲かるから、とかではない。
必要だと思うから。自分が欲しいものだから。
その方がメリットがあり、結果的に儲かったりする。</p>

<h4 id="section-2">作り手はスケジュールを意識しない。</h4>
<p>良いものを作ることに注力する。</p>

<h4 id="section-3">汎用より専門の方が便利なことが多い。</h4>
<p>なんでも売ります、なんでも解決できます、といった汎用的なものは専門的なものには劣る。</p>

<p>例）</p>

<p>楽天とzozotownでは、服飾に関してはzozotownが強い。なぜならそれ用のUIやカスタマイズ性を有しているから。
イメージが大切なブランドでは、楽天のダサ便利なUIがマイナスになることもある。</p>

<h4 id="section-4">旧式のマネージャーは要らない。</h4>
<p>コミュニケーションコストが激減したのでその役割は不要。
責任者、ということであればプロジェクトに対して必要。</p>

<h4 id="section-5">未来を肯定する。</h4>
<p>ゼロベースで何が便利かを考える。
既存の組織、モデルありきで考えるとそれの維持に注力してしまい、未来の否定につながる。</p>

<h4 id="section-6">他人の評価を期待していたら目的がぶれる。</h4>
<p>目的は何が役立つか、何が欲しいかなので、そこに注力する。
そのためには、自分の中でおおよその判断軸を構築する必要がある。</p>

<h4 id="section-7">資本主義の危険を察すると教育が伸びる。</h4>
<p>資本主義に特化し過ぎると、ハイリスクハイリターンで不安定になる。（リーマン・ショックとか。）</p>

<p>その危険性を痛感したあとは、「ちゃんと学ぶ・教えるをしないとヤバイ」と思うのか教育の需要が増えるらしい。</p>

<h2 id="section-8">感想</h2>

<p>どの人も目的志向が強くていいなと思った。</p>

<p>自分が欲しいと思うもの、やりたいと思うことに関しては、邪な考えの他者より優位に立ちやすいし、モチベーションも保ちやすい。</p>

<p>そういったモチベーションがなく、ただ「楽してお金儲けしたい」という人も、なんのためか、それが実現したら何がしたいのか、を考えてくと面白いのではと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1分間ジェフ・ベゾス]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/10/one-minute-jeff-bezos/"/>
    <updated>2015-01-10T10:32:52+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/10/one-minute-jeff-bezos</id>
    <content type="html"><![CDATA[<p>AmazonCEOのベゾスの名言集みたいなもの。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797377291/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41HuBPH719L.jpg" width="340" height="500" alt="1分間ジェフ・ベゾス Amazon.comを創った男の77の原則 (1分間シリーズ)" title="1分間ジェフ・ベゾス Amazon.comを創った男の77の原則 (1分間シリーズ)" /></a></p>

<h3 id="section">徹底した顧客主義</h3>

<p>すべての行動は顧客に通じている。
競争をするときも、利益を出すときも。</p>

<p>成功の判断基準は顧客であって、同業他社は関係ない。</p>

<p>物を売っても儲けるのではなく、顧客の判断を助けることで儲ける。</p>

<h3 id="section-1">改革できる組織</h3>

<p>新しい発想を生み出し、新しいサービスを提供できる組織を作る。</p>

<p>かかるコスト（お金と時間）をとにかく減らして、試行錯誤を多くできるようにする。</p>

<p>社内の文化も、新しい発想を歓迎する。</p>

<blockquote>
  <p>「リスクをとることはクールだ。」</p>
</blockquote>

<blockquote>
  <p>「結果がわかることは挑戦とは言わない。クールじゃない。」</p>
</blockquote>

<h2 id="section-2">感想</h2>

<p>この本を読んでると、Amazonは営利企業というよりNPOみたいだなと思いますね。</p>

<p>シンプルでかつ目的志向な点は大いに参考になります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[国政選挙に興味がなくなった理由]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/12/06/the-reason-for-no-interest-in-national-elections/"/>
    <updated>2014-12-06T11:52:56+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/12/06/the-reason-for-no-interest-in-national-elections</id>
    <content type="html"><![CDATA[<p>選挙に興味が持てなくなった理由をまとめてみた。</p>

<!--more-->

<h3 id="section">概要</h3>

<p>今回の総選挙は何を争点とすればいいかもわからないし、そもそも野党がボロボロなので消去法で自民党なのは目に見えてる。</p>

<p>「じゃあ選挙行かなくても良くない？」</p>

<p>という声に対して、ポリタスをはじめとするいろいろなメディアで選挙に行くべき論を展開している。</p>

<p>誰に伝えたいわけでもないが、現行の政治に興味のなくなった若者の意見として記しておく。</p>

<h3 id="section-1">国政選挙に興味がない理由</h3>

<ul>
  <li>
    <p>選挙に行くべき論の不合理さ</p>
  </li>
  <li>
    <p>現状正しく機能しているという見方</p>
  </li>
  <li>
    <p>選挙でできること、できないこと</p>
  </li>
</ul>

<h4 id="section-2">選挙に行くべき論の不合理さ</h4>

<p>選挙に行くべき論といっても、曖昧な問いかけであったり感情論であったりしている。</p>

<p>僕個人としては、選挙に行く１５分とか政治を考える時間といったコストと、数千万分の１の一票の有効性を考えると、行かないというのも合理的判断だと考えている。</p>

<p>それに対して、行くとどのくらいのメリットが見込めるのか、それは投票に出かけるコストを上回るものなのかといった点の合理性を説明している「選挙に行くべき論」は見かけない。</p>

<h4 id="section-3">現状正しく機能しているという見方</h4>

<p>国政に関して言えば、憲法で民主主義・人権・最低限文化的生活を謳っている以上、国は全体最適を目指さざるを得ない。</p>

<p>（全体最適を考える際に、長期（未来の国民のため）と短期（今の国民のため）があるが、後述の理由により、それは政治家が判断する問題ではない。）</p>

<p>全体最適を進めるということは、人口比率の多いグループが優遇されることに他ならない。今の日本で言えば、高齢者が優遇されることは当然の流れとなる。</p>

<p>それを否定することは全体最適を認めないことであり、大げさな言い方をすれば憲法をないがしろにしていると言えるし、そうでなくてもわがままに違いない。</p>

<p>つまり、日本という人口比率の中では今の政治はかなりまともに機能しているのではないかと考えられます。</p>

<h4 id="section-4">選挙でできること、できないこと</h4>

<p>現行法では、選挙で選ばれた人は掲げた政策（マニフェスト）を必ずやらなければいけないという決まりはない。</p>

<p>なぜかといえば、時々刻々と世界情勢が変わりうるから。</p>

<p>２，３年前の情報での計画より、最新の情報を元にした計画のほうが良いという判断なのだろうし、そこに異論を唱える声はあまり耳にしない。</p>

<p>では政治家の役目は何かといえば、政策の実行代理ではなく、現時点での最適な政策を考えて実行することになる。</p>

<p>であれば国民が選挙でできることは、政策の是非を考えることではなく、どんな目的を果たして欲しいかを考えることである。
そして、どの政治家が我々の目的に合う政策を考えて実行してくれるかを判断することになる。</p>

<p>（先ほど触れた、短期の最適化か長期の最適化かは、どこに重きをおくかという目的論なので、国民が考える部分に相当する。現行の政治がそうなっていないとしたら、政治家ではなく国民の問題。未来の子どもたちのことを考えるより自分たちの生活でいっぱいいっぱいだからそういう政治家を選ぶことになる。）</p>

<h3 id="section-5">ではどう生きるべきか</h3>

<ul>
  <li>
    <p>国単位で考える時代は終わり</p>
  </li>
  <li>
    <p>会社も国も同じ</p>
  </li>
  <li>
    <p>受け身でなく能動的な政治を</p>
  </li>
</ul>

<h4 id="section-6">国単位で考える時代は終わり</h4>

<p>前述の通り、現行の政治は全体最適を果たそうとしているし、実際機能しているように見える。</p>

<p>ただ、それでは若者あるいはマイノリティはどうすればいいのか？</p>

<p>解としては、自分が多数派になる組織に属すればいい。</p>

<p>例えば海外に移住するとか、地方出身なら仲間を集めて返ってくるとか。</p>

<p>地方に行っても国政は影響する、という点はそのとおりだが、国での全体最適に納得がいかない場合は国内で不満を言っても解消しない。なぜなら既に全体最適だから、変えたら他の国民が代わりに不公平の犠牲になるだけである。その場合は他国に移住するしかない。</p>

<p>他国に移住した場合にも国連などの世界機関で最適化が行われるじゃないか、という意見もあるかもしれないが、全世界の場合はそこから逃れようがないので、考えても仕方がない。（地球外逃亡できるなら別だが）</p>

<p>国家間の移動が現実的な現代において、国という単位でしか考えないことは時代遅れになる気がします。</p>

<h4 id="section-7">会社も国も同じ</h4>

<p>この話は何も国に限った話ではなく、会社、あるいはどのコミュニティでも同じだと思います。</p>

<p>会社の待遇について不満な場合、直訴したり愚痴を言ったり労組を組むのはあまり効率的とは思いません。より価値観の合うところへ移動する方が双方にとって嬉しいはずです。</p>

<p>自分と合う価値観、境遇の人が多く所属する集団に身をおき、そういった個々のコミュニティごとに最適化を図っていくのが現代の理想的な状態だと考えます。</p>

<p>その結果、自然淘汰によって企業も国も健全な組織になっていくと思います。</p>

<p>企業に関しては、怠け者ばかりが集まった組織は淘汰されていくでしょう。国に関しても、提供せず享受するだけの老人ばかりがあつまると崩壊するでしょう。</p>

<p>つまり、生き残るためには現状を改善するモチベーションが生まれるので、不平等は是正されていくと思います。</p>

<h4 id="section-8">受け身でなく能動的な政治を</h4>

<p>まとめると、上が決めた政策をただ受け入れる姿勢ではなく、こちらからよりよい環境を求めて動けるようにしていくことが、現代を不満なく生き抜くためには必要なのではないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『やはり俺の青春ラブコメはまちがっている。』感想]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/11/23/alpha-and-beta/"/>
    <updated>2014-11-23T18:33:52+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/11/23/alpha-and-beta</id>
    <content type="html"><![CDATA[<p>アニメだけ見ました。ラノベも読もうかな。</p>

<p>現代においての新しい視点をわかりやすく提示してくれるという意味でとても斬新な作品。</p>

<p>ぼっち・オタクの良いところ悪いところを論理的に的確に表現して面白かった。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4094512624/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51W374cbAlL.jpg" width="350" height="500" alt="やはり俺の青春ラブコメはまちがっている。 (ガガガ文庫)" title="やはり俺の青春ラブコメはまちがっている。 (ガガガ文庫)" /></a></p>

<h3 id="section">概要</h3>

<p>主人公は悟りぼっち。
空気を読むのは得意だが、合理性を追求した結果他人と関わるのを避けるようになった。
引きこもりでないのはご都合主義っぽい。</p>

<p>（主人公はあくまで作者の代弁者のような感じで、既に完成されたキャラっぽい。
初めのキョドったりしてた設定は直ぐになくなったし、ぼっちに一切の迷いがないし。）</p>

<p>サブ主人公はハイスペックぼっち。
能力が高すぎて周りから嫉妬の対象となった結果。</p>

<p>（詳しくは書かないけど、こういった設定に女性が多いのは、やっぱり一般的にそうだからなんだろう。）</p>

<p>集団生活を基本とする「社会」へ出る前の訓練場としての「学校」を舞台として、
上記二人のぼっちの価値観と処世術を考察するお話。</p>

<h3 id="section-1">何が面白いのか</h3>

<h4 id="section-2">ぼっちの価値観を上手く表現しているところ</h4>

<p>先述の通り、学校という場では集団活動への経験が重視される傾向にある。
しかし、それを苦手とする（あるいはそれを習得する気がない）人も一定数いる。</p>

<p>そういった人種は声を上げることをしない（＆そんな場はない）ため、
多くの人は彼らの心情を知らないままにいじめ・更生対象としてきた。</p>

<p>この作品では彼らの言い分を悟りぼっちに語らせることで、
ぼっちの隠れた生態系を解き明かすことにあります！</p>

<p>といっても媒体がラノベ＆アニメなので「ぼっち」にカテゴライズされる人ばかりが見てるのでしょうが、これだけ人気なのをみるとやはり共感する人が多いんだろうなと思います。</p>

<p>ぼっちの生態系を学びたい人は是非。
卒論とかにもいいんじゃない？</p>

<h4 id="section-3">集団生活でよくある問題に的確に対応している点</h4>

<p>問題に対しての良くある間違った対応として、手段と目的がごっちゃになってしまうことが挙げられます。</p>

<p>「コミュ力が一番」とか、「みんなと同じようにしなさい」という人も、『世の中を生き抜くため』という目的を見失い手段に走ることが多いように思います。</p>

<p>もっとも、学生のうちは学校内が社会の大部分なので、
『学校で上手く生き抜く』ためのコミュ力というなら間違ってないのですが、
失敗しても食えなくなることはないでしょう。（家庭の方針にもよりますが。。。）</p>

<p>　</p>

<p>その点、作中の合理主義の悟りぼっちは目的指向です。</p>

<ul>
  <li>相手に気に入られたいための手作りなら、上手い下手はあまり重要ではない。</li>
  <li>楽しく過ごしたいための友達作りなら無理することない。</li>
  <li>批評を求める相手にはお世辞抜きに徹底的にやる。</li>
  <li>問題の『解決』が無理なら『解消する』というウルトラCを仕掛ける。</li>
  <li>成長したいための委員長なら、本人が頑張ってなくても成長させる。</li>
</ul>

<p>などなど。</p>

<p>結果が出来過ぎなのはよくあることですが、毎回感心する手段を取ってくれます。</p>

<p>　</p>

<p>ついで言うと、先生も合理主義です。ぼっち達をリア充達と共にキャンプに連れて行った時も、
「（彼らと）仲良くなれとは言ってない。上手くやれと言ったんだ」
といった趣旨の発言をしています。</p>

<h3 id="section-4">気になった点</h3>

<p>ハイスペックぼっちは周りが同レベルの環境に行けば人付き合いも上手くやれるだろうし仕事にしても問題ないだろうからいい。</p>

<p>でも、悟りぼっちは社会に出てどうやって暮らしていくつもりなのだろうか？
そこを考えずにぼっちを許容しているのだとしたら、ちょっと無責任な気もする。</p>

<p>ただ、「人と協力する能力がないと生きていけない」という主張に対しては、インターフェースとなる人（この作品では萌え枠の女の子）が居てくれれば問題ないと思うけど。</p>

<p>あと、普通はここまでぼっちを極める前に両親が何か言うと思うんですが隠してるんでしょうか？悟ってるのに隠すというのはおかしい気が。</p>

<h3 id="section-5">おまけ</h3>

<ul>
  <li>
    <p>随所で言葉遊びのセンスが良いなと思いました。西尾維新とまた違ってシンプルな感じですね。</p>
  </li>
  <li>
    <p>１２話の屋上の話は<a href="http://konamikan.blomaga.jp/articles/9914.html">コレ</a>読まないと意味がわかりませんでした。</p>
  </li>
  <li>
    <p><a href="http://toyokeizai.net/articles/-/54010">一般的に非リアはコミュニケーション以外に脳を使っているという話</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[電話回線のプランメモ]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/10/23/phone-plan/"/>
    <updated>2014-10-23T06:34:02+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/10/23/phone-plan</id>
    <content type="html"><![CDATA[<!--more-->

<h3 id="section">データ回線のみ</h3>

<h3 id="section-1">電話回線のみ</h3>

<p>http://www.hanacell.com/japan/
http://www.hanacell.com/jp/tariff/handset.php</p>

<h3 id="section-2">電話＋データ回線</h3>

<p>https://www.iijmio.jp/hdd/service/voice.jsp</p>

<p>→ １６００円 ２GB</p>

<p>http://umobile.jp/service/sim/vc/</p>

<p>→ １５８０ １GB</p>

]]></content>
  </entry>
  
</feed>
