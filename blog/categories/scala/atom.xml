<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-05-24T12:42:20+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[play2でのJsonの取り扱い]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/09/30/play2-json/"/>
    <updated>2014-09-30T23:12:27+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/09/30/play2-json</id>
    <content type="html"><![CDATA[<p>json ↔ scalaObjectの変換が上手く行かないのでメモ（解決してない。）</p>

<!--more-->

<h3 id="section">したいこと</h3>

<p>redisなどのキャッシュサーバにデータを格納しておくとき、Scalaのオブジェクトを文字列にして格納しておきたい。</p>

<p>で、取ってくるときにはその文字列をオブジェクトに再変換したい。</p>

<h3 id="section-1">ざっくりとした例</h3>

<p>Playについてるjsonライブラリを使う。</p>

<p>JｓValueは、json文字列をパースした状態のオブジェクト。（ASTとか構文木って言うのかな。。よく知らない。）</p>

<p>```
import play.api.libs.json.{JsValue, Json}</p>

<p>object PlayJson {</p>

<pre><code>case class Person(id:Int, name:String)

implicit val writes = Json.writes[Person]
implicit val reads = Json.reads[Person]

val person = Person(1,"shiba")

//ScalaObject =&gt; jsonString
val jsValue1: JsValue = Json.toJson(person)
val str:String = Json.stringify(jsValue1)

//ScalaObject &lt;= jsonString
val jsValue2:JsValue = Json.parse(str)
val person2:Person = Json.fromJson[Person](jsValue2).asOpt.get
</code></pre>

<p>}</p>

<p>```</p>

<p>型を細かく書いてるのでやりたいことはわかると思う。</p>

<h3 id="section-2">結果</h3>

<p>こんな感じで変換できるはず、、、なのだが、実際にWebアプリケーションで似たことをするとたまに（3割くらいで）変換に失敗する。</p>

<p>この「たまに」ってのが非常にウザい。。。</p>

<p>ちなみに、エラーの発生箇所は、JsValueから某Objectへの変換のところらしい。（たま〜にJsValueへの変換でもミスってる）</p>

<p>原因として思い当たるのは、</p>

<ul>
  <li>文字列の格納にredisを使ってて、そこで文字列が改変される。</li>
  <li>某ObjectがList[HogeObject]とかになってるせい。</li>
  <li>Jsonとのマッピングをちゃんと定義してないせい</li>
</ul>

<p>たぶんどれもがちょっとずつ関与してるんだろうな、という感じで困っている。</p>

<h3 id="section-3">解決案</h3>

<p>JsValueと某Objectのマッピングを丁寧に書いてあげる。（まだ試してない。）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ScalaのFutureの使い方メモ]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/09/27/scala-future/"/>
    <updated>2014-09-27T19:44:21+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/09/27/scala-future</id>
    <content type="html"><![CDATA[<p>Futureは非同期に行いたい処理（時間かかる系・ファイルIOや通信など、外部システムに処理を投げる系）を非同期に行うことができるAPIです。</p>

<p><a href="http://docs.scala-lang.org/ja/overviews/core/futures.html">参考サイト</a></p>

<!--more-->

<h3 id="section">宣言の仕方</h3>

<p><code>
val firstOccurence: Future[Int] = future {
  val source = scala.io.Source.fromFile("myText.txt")
  source.toSeq.indexOfSlice("myKeyword")
}
</code></p>

<p>ここではファイル操作のシステムに処理を投げ、結果をFuture[Int]という入れ物に入れてもらうと宣言している。</p>

<p>ちなみに、Scala2.11〜はfutureメソッドの代わりにFutureを使うことが推奨されてるらしい。</p>

<h3 id="section-1">使い方</h3>

<p>普通は、処理を外部に投げた後に、処理の結果（先の例だとInt型のデータ）を使いたいことがほとんどだと思われる。</p>

<p>取り出し方法は二通りあって、</p>

<ul>
  <li>処理が完了した時点でcallback関数を実行する（Non-Blocking）</li>
  <li>処理が完了するまで同一スレッドで待機させる（Blocking）</li>
</ul>

<p>Webアプリケーションなどのサーバーサイドの実装をしたい場合は、Non-Blockingだと一スレッドで完結しないのでたぶん使いづらいんだと思う。</p>

<p>例えば、ある時間のかかる処理を依頼するPOSTリクエストを投げた時には、一度そのリクエストを受け取ったというメッセージだけ返して、裏で非同期に処理させて、結果は別途通知する、という仕組みになるんだろうな、と思っています。</p>

<h4 id="non-blocking">Non-Blockingの場合</h4>

<p><code>
f onComplete {
  case Success(posts) =&gt; callback(posts)
  case Failure(t) =&gt; println("エラーが発生した: " + t.getMessage)
}
</code></p>

<p>成功ならFuture[T]のT型が、失敗ならThrowable型が返ってきます。</p>

<p>成功時だけ取ってきたい場合は、</p>

<p><code>
f onSuccess {
  case posts =&gt; callback(posts)
}
</code></p>

<p>などとします。</p>

<h4 id="blocking">Blockingの場合</h4>

<p>※これをやると実質非同期にならないのでオススメしない。</p>

<p>```
//Future[T]のT型が返ってくる。失敗なら例外[Throwable]が投げられます。
Await.result(f, Duration.Inf)</p>

<p>//終わった結果を取得する。値はThrowaleかTでパターンマッチして処理する。
Await.ready(f, Duration.Inf)
```</p>

<p>ちなみに、<code>Duration.Inf</code>はAwaitする期間を表す。今回の例は「無限に待つ」の意。
他にも<code>10 nanos</code>とか使える。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[関数プログラミング試行錯誤]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/09/23/functional-programing/"/>
    <updated>2014-09-23T23:12:16+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/09/23/functional-programing</id>
    <content type="html"><![CDATA[<p>なんとかして関数型プログラミングをやりたいんですが、
慣れてないので苦戦中です。</p>

<p>とりあえず試行錯誤の記録を残しておきます。</p>

<h2 id="section">目的</h2>

<p>関数プログラミングをしたいモチベーションは、</p>

<ul>
  <li>なるべく小さなまとまりに分け、テストをしやすくする。</li>
  <li>処理の流れを宣言的に書いて見やすくする。</li>
  <li>システムのスケールアウトに対応する。</li>
</ul>

<p>です。</p>

<p>http://qiita.com/kenokabe/items/a8477694a499ca869cde</p>

<h2 id="section-1">言語と特徴</h2>

<h3 id="scala">Scala</h3>

<ul>
  <li>サーバーサイド（WebAPIサーバー）の実装に使っている。</li>
  <li>DBサーバーへのアクセスを抽象化したい。</li>
  <li>valとdefの違い、implicit parameterの使いドコロが難しい</li>
  <li>関数の結合とかしていきたい。</li>
</ul>

<h4 id="section-2">理想のイメージ</h4>

<ul>
  <li>DAO層はRDBでもCacheでも、非同期でも対応できるようにしたい。</li>
  <li>Logic部はテスタブル・粗結合な小さな関数を組み合わせたい。</li>
  <li>newとか書きたくない。状態を持ちたくない。</li>
  <li>ローカル変数もなるべく使わずメソッドチェーン的に書きたい。</li>
</ul>

<h3 id="javascript">Javascript</h3>

<ul>
  <li>WebAPIクライアントとして使っている。</li>
  <li>bacon.js lodash.jsを主に使う予定。</li>
  <li>演算はサーバーに任せるのでもっぱらDOM操作系</li>
  <li>FRPに興味があるので試してみたい。</li>
</ul>

<h4 id="section-3">目指すカタチ</h4>

<ul>
  <li>イベント・DOMの管理は全てControllerで把握したい。</li>
  <li>FRPは興味あるけど、Angularでバインドしたデータの変更が追い切れなくなった経験があるので、データバインディング嫌い。</li>
  <li>そもそもModelっていう状態を持ちたくない。</li>
  <li>WebAPIをリッチに用意することで、クライアントはそもそもシンプルにしたい。</li>
  <li>手続き型を卒業して全体の見通しを良くしたい。</li>
</ul>

<h2 id="section-4">困った例</h2>

<h3 id="baconjs">bacon.jsのイベントストリームを使うと、パラメータが足りない。</h3>

<h4 id="section-5">事象</h4>

<p>ｊQueryプラグインのオブジェクトに対してeventStreamを作っても、パラメータが一つしか取れない。</p>

<h4 id="section-6">解決法</h4>

<p>普通にイベントを貼り付けて、イベント発火時にイベントストリームを後から作ればいいや。</p>

<h3 id="scaladaointerface">ScalaのDAO層のinterfaceをどうするか？</h3>

<h4 id="section-7">事象</h4>

<p>DAO層はCacheサーバーの場合とRDBの場合とがあるが、session（RDBのtransaction・connection管理用）の使い回しとか返す型とかをどうしようか迷った。</p>

<h4 id="section-8">解決策</h4>

<p>そもそも、読み込みと書き込みで用途が違うことに気がついた。</p>

<p>KVS系の場合はそもそも書き込みしないので、読み込みはsessionを含めず、書き込みだけ含める仕様に変える。</p>

<p>そもそも書き込みだけ別オブジェクトにすべき。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カリー化と部分適用の違い]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/08/20/curry-partially-applied/"/>
    <updated>2014-08-20T00:39:43+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/08/20/curry-partially-applied</id>
    <content type="html"><![CDATA[<p>カリー化と部分適用の違い</p>

<!--more-->

<p>http://qiita.com/f81@github/items/e8bfab96b4be9e404840</p>

<h3 id="section">カリー化</h3>

<p>複数の引数を取る関数を、1つの引数を取る関数のチェーンに変換すること。</p>

<h3 id="section-1">部分適用</h3>

<p>複数の引数を取る関数に対して、一部の引数に値を束縛した関数を返すこと。 </p>
]]></content>
  </entry>
  
</feed>
