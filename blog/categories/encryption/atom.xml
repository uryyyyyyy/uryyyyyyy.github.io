<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: encryption | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/encryption/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-05-24T12:44:26+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[暗号技術入門]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/05/03/encryption-technology/"/>
    <updated>2015-05-03T11:39:23+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/05/03/encryption-technology</id>
    <content type="html"><![CDATA[<p>結城先生の暗号技術入門書。雑なメモ書きを残しておきます。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797350997/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51evnioBHsL.jpg" width="354" height="500" alt="新版暗号技術入門 秘密の国のアリス" title="新版暗号技術入門 秘密の国のアリス" /></a></p>

<h1 id="section">暗号技術入門</h1>

<h2 id="section-1">概要</h2>

<h3 id="section-2">暗号化の目的</h3>

<ul>
  <li>機密性の確保</li>
  <li>改竄の防止 正真性</li>
  <li>本人の操作の証明 署名</li>
</ul>

<h3 id="section-3">暗号技術で用いられる技術一覧</h3>

<ul>
  <li>対象暗号</li>
  <li>公開鍵暗号</li>
  <li>一方向ハッシュ</li>
  <li>乱数生成</li>
  <li>デジタル署名</li>
  <li>メッセージ認証</li>
</ul>

<h2 id="section-4">過去の暗号</h2>

<p>ソフトウェア以前のもの。いずれも共通鍵を必要とする。</p>

<h3 id="section-5">シーザー暗号</h3>
<p>総当たりに弱い</p>

<h3 id="section-6">単一換字</h3>
<p>総当たりに強い。アルファベットだけでも26！通り</p>

<p>頻度分析に弱い</p>

<h3 id="section-7">エニグマ</h3>
<p>戦時中に活躍。</p>

<p>事前に共有した鍵でローターを設置して、通信の始めの文字でワンタイムの鍵を暗号化して送信。その後暗号を復号化する。</p>

<p>問題</p>

<p>ワンタイムの鍵を考えるのが人である。
複数の暗号化されたワンタイム鍵から、その日の共通鍵を導出できた。</p>

<h2 id="section-8">対象暗号</h2>

<h3 id="section-9">使い捨てパッド</h3>
<p>その平文の長さに合わせたランダムな01のマスクをかける。
01の全てのパターンになりうるため、鍵を知らないと復号化は不可能。</p>

<p>ただし鍵を安全に送れるならパスワードも送れることになる。</p>

<h4 id="section-10">事前に一定長のマスクを送っておくことは可能か？</h4>

<p>！ 使い回すと解読が可能になってしまうが、そうでないなら有効か。</p>

<p>本文より長いマスクを事前に送っておけば、二度当てる心配もない。
長すぎて平文がどこまでかわからない、という問題は心配しなくてもわかるだろう。</p>

<h3 id="des">DES</h3>

<p>パリティチェックの仕組み。</p>

<p>トリプルDESは鍵が増えたというだけ？</p>

<h2 id="section-11">共通鍵暗号のモード</h2>

<p>使い捨てパッドでない限り鍵は本文より短くなる。
そのため、その暗号鍵を使いまわすパターンがいくつか存在する。</p>

<h3 id="ecb">ECB</h3>
<p>平文をブロックに切って繰り返し暗号化する。
それぞれのブロックで処理が独立しているため、
並列に復号化できるが、パターンが分かれば、復号化しなくてもすり替えられる。</p>

<p>固定長の使い捨てパッドを繰り返すのと同じ？</p>

<h3 id="cbc">CBC</h3>

<p>一つ前のブロックの暗号化したものとのxorを取ってから暗号化する。
始めのブロックには別途ランダムな値が必要。
隣のブロックの復号化に影響するため、単体の値の操作は困難。ただし初期化ベクトルは例外。</p>

<h3 id="cfb">CFB</h3>

<p>使い捨てパッドと同等らしい？</p>

<p>xorと暗号化の違い。
暗号化はアルゴリズムが任意。DESではラウンド関数と言うように。また、サブ鍵の長さに制限がない。</p>

<p>途中で差し替える再生攻撃ができてしまうため非推奨。</p>

<h3 id="ofb">OFB</h3>

<p>暗号文を繰り返し暗号化し、平文とのxorを取っていく。</p>

<p>暗号文のビットを反転させると対象の平文も反転する。</p>

<h3 id="ctr">CTR</h3>
<p>カウンターをかける。OFBよりも並列で処理できる。</p>

<h2 id="section-12">公開鍵暗号</h2>

<p>現在の一般的なアルゴリズムはRSA。</p>

<p>離散対数を求めることは難しいこと、大きな素数からなる数の素因数分解は難しいことを利用している。</p>

<h3 id="section-13">作り方</h3>

<p>大きな素数を2つ求める。
その素数をかけてnを作る。
素数引く1の最小公倍数をlとする。
lと互いに素である小さい数字をe
とする。
dを求める。</p>

<p>公開鍵ではnのmodをとるので、nより大きなデータは暗号化できない。</p>

<h3 id="section-14">なぜ解読が難しいか</h3>

<p>暗号文を平文にするロジックは離散対数をもとめる計算になる。</p>

<p>総当たり攻撃は、dが1024ビット相当になり数が多すぎる。</p>

<p>nはpqからできてることを利用してdを解読する。
大きな素数からなる数の素因数分解は難しい。</p>

<p>その他の攻撃手法は確立されていないが、例えば乱数精製機のムラをつく、別の方法でdを求める、などです。</p>

<h3 id="mitm">MITM攻撃</h3>

<p>中間者攻撃。</p>

<p>公開鍵暗号を使っても、用いる公開鍵が意図しない相手のものだった場合には意味がなくなる。</p>

<p>これを防ぐには、公開鍵が通信相手本人から送ったものだと証明できる必要がある。</p>

<h3 id="section-15">各種疑問</h3>

<p>全部公開鍵でいいのでは？
基本遅くなるので、共通鍵の暗号化に使うなどを行う。</p>

<p>素数ベアの枯渇、衝突
512ビットの素数は全宇宙に存在する原子より多い。</p>

<h3 id="section-16">一方向ハッシュ</h3>
<p>データの正真性を調べるのに用いる。
データ全てを比べる、というか二つの実データを持つことは困難なため。</p>

<p>出力はフィンガープリントとも呼ばれる。指紋ですね。</p>

<p>大容量のデータを扱う際など、ミラーサイトやプロキシを経由することがある。そのときに変な操作をされてないかを確認できる。もちろんハッシュ値は公式から取得する。</p>

<h3 id="section-17">メッセージ認証コード</h3>
<p>そのメッセージが本当に相手から送られてきたか？途中で改竄されてないかを判定する。</p>

<p>改竄については一方向ハッシュでもできる。
正しい相手からかを測るのに使う。</p>

<p>自分と相手だけが知っている情報を用いるため、第三者への証明（否認の防止）には使えない。</p>

<h3 id="section-18">デジタル署名</h3>

<p>第三者にも、そのメッセージが自分が作ったものだと証明できる。</p>

<p>rsaなど公開鍵暗号のアルゴリズムを使う。
対象鍵との比較みたいなもの。</p>

<p>ただ、メッセージ自体と別（意味がわからなくても同じだとみなせればいい）なのでハッシュ値の検証だけでよい。</p>

<p>署名はコピーされても構わない。普通は書類に通し番号とかついているので、同じものが複数あっても同一のメッセージとみなされるので問題ない。（再生攻撃の防止）</p>

<p>公開鍵暗号の暗号鍵と一緒のものを使うのはリスクがある。また、認証をかけるのはハッシュ値だけにするべき。</p>

<p>認証するための公開鍵自体を認証しなければいけない。</p>

<h3 id="section-19">認証局</h3>
<p>公開鍵自体の認証をどうするか、第三者にしてもらおう、ということで生まれた。</p>

<p>ある手続きで本人確認をして自分の鍵を登録できる。</p>

<p>受け取るときは、認証局の認証をつけた公開鍵(証明書)を受け取る。</p>

<h3 id="section-20">攻撃</h3>

<p>管理が移管されたなど、対象のドメインのキーが期限切れの場合がある。
そういった用途のため、認証局はCRLを持っている。</p>

<p>どこの情報を信用するかというのは根源的に難しい。</p>

<h2 id="ssltls">SSL/TLS</h2>

<p>暗号技術の詰め合わせ。暗号スイート
いろんなプロトコルで使える。</p>

<p>4つのサププロトコルを持つ。</p>

<h3 id="section-21">ハントシェイク</h3>
<p>認証と、共有鍵の取り決め。</p>

<p>使える暗号スイートを伝え合って決める。</p>

<h3 id="section-22">暗号仕様変更プロトコル</h3>
<p>暗号スイートの切り替え。</p>

<h3 id="section-23">警告プロトコル</h3>

<p>暗号化失敗の通知</p>

<h3 id="section-24">アプリケーションデータプロトコル</h3>
<p>中身を相手に伝える。</p>

]]></content>
  </entry>
  
</feed>
