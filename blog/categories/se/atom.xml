<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SE | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/se/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-11-22T23:42:35+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「納品」をなくせばうまくいく]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/07/21/entrusted-development/"/>
    <updated>2014-07-21T22:20:48+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/07/21/entrusted-development</id>
    <content type="html"><![CDATA[<p>今話題の納品のない受託開発の本です。</p>

<p>今までとこれからのビジネスモデルと、自分の生き残りを考える上で非常に参考になったので。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4534051948/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51krLM-rlvL.jpg" width="346" height="500" alt="「納品」をなくせばうまくいく ソフトウェア業界の“常識&quot;を変えるビジネスモデル" title="「納品」をなくせばうまくいく ソフトウェア業界の“常識&quot;を変えるビジネスモデル" /></a></p>

<h3 id="section">納期の問題点</h3>

<p>一度決めた要件定義から抜け出せない。
仕様を満たすことがゴール。</p>

<p>完成した頃には陳腐化したり、思ってたのと違うことがしばしばある。
しかし、それの変更にはすごくコストがかかる。</p>

<p>そもそも変更をすることを想定していない設計になっているから。</p>

<h3 id="section-1">受託開発というより技術顧問</h3>

<p>対象となる会社は小さくて技術者を持っていない会社。</p>

<p>そこで使う業務システムは、要件を固めきれない流動的なものがほとんど。</p>

<p>納品型は、使えるならいいけどそうでなければ
ツールなどのカスタマイズが必要。</p>

<h3 id="section-2">エンジニアにとっての利点</h3>

<p>フィードバックが早い</p>

<p>開発と保守の分離が少ないのでやる気が持続する</p>

<p>古臭い仕組みに乗っ取らなくて良くなる。
古い製品はむしろ負債になりうる。</p>

<p>周りに優秀なエンジニアがいる。</p>

<p>目的が、「何かをなすこと」というより、何かをなすための手伝いをITを使って行うこと、になる。</p>

<p>定職につけ、収入が安定する。</p>

<p>一気通貫で責任を持てる。</p>

<p>チームを作れる。</p>

<h3 id="section-3">ユーザーに取っ手の利点</h3>

<p>サービス化することで変化に強い。
気軽に始められる。</p>

<h3 id="section-4">なぜ今までなかったのか</h3>

<p>インフラ・環境が追いついた。
インフラasコード</p>

<p>実行環境の統一、
ブラウザがあればだいたいできる。</p>

<h3 id="section-5">今後</h3>

<p>チーム開発が流行る。</p>

<p>集団でフルスタックエンジニアになる。</p>

<p>デザイナーはエンジニアと密接になる。</p>

<p>モデルの広がり ギルドの浸透。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[システム開発の種類]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/07/21/type-of-system-development/"/>
    <updated>2014-07-21T22:19:35+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/07/21/type-of-system-development</id>
    <content type="html"><![CDATA[<p>納品のない受託開発を読んで、システム開発の種類を大別してみます。</p>

<!--more-->

<h3 id="section">システム開発の分類</h3>

<p>あるシステムを構築したい時の選択肢として挙げられるものは、
大体は以下のようになります。</p>

<ul>
  <li>パッケージ</li>
  <li>受託開発（SIer含む）</li>
  <li>内製</li>
  <li>技術顧問（納品のない受託開発・フリーランス）</li>
</ul>

<p>ここでは、現状がどうなっているかはおいておいて、本来どうあるべきか、強みはどこか、
これからどうなっていくのか、を考えてみようと思います。</p>

<h3 id="section-1">パッケージ</h3>

<h4 id="section-2">概要</h4>

<p>多くの顧客に同じものを提供することでコストメリットを生み出すモデル。
プログラミングでいうところのライブラリを作ってる感じ。</p>

<p>「ソフトウェアは複製が容易」なことをフルに活かしているモデル。</p>

<h4 id="section-3">メリット</h4>

<p>既に実績がある、かつモノが納品されることが主なので大体信用できる。
相対的に安い。</p>

<h4 id="section-4">デメリット</h4>

<p>自分たちの使いやすいようには作られていない。
実業務に耐えうるかは使ってみないとわからないが、
たいていは、「自分たちの業務をシステムに合わせる」か、
「システムを自分たちの業務に合わせるために追加開発を行う」ことが必要。
SIerがパッケージを選定してカスタマイズすることがよくある。</p>

<h4 id="section-5">向いている案件</h4>

<p>汎用化できるもの。変更の少ないもの。
ビジネス本来とは別だが手間のかかる部分（会計・SCM・コミュニケーション）などが主流か。</p>

<h4 id="section-6">個人的感想</h4>

<p>カスタマイズをしたら負け。それはビジネスモデルの崩壊を意味する。
費用対効果の高いところのみに注力して他は切り捨てていく覚悟がなければ、
何でも屋になってしまいコストメリットを提供できない。</p>

<p>いずれ、ツール群の提供としてOSS化していくんじゃないかと思う。
パッケージベンダーは、そのシステムをどう組み込むか、といった運用・カスタマイズの部分で利益を得ることになるのではと。</p>

<h3 id="section-7">受託開発</h3>

<h4 id="section-8">概要</h4>

<p>事前に要件定義をしっかり固めておいて、それを満たす（顧客に最適化された）システムを
なるべく安く作って納品することで顧客に価値を提供するモデル。</p>

<p>内部では０から作ったり、いろいろなシステムを統合したり、下請けに投げたりなど様々。</p>

<p>納品がゴールなので、保守・運用は別契約（別会社）になることもしばしば。</p>

<h4 id="section-9">メリット</h4>

<p>自分たちの企業にマッチしたシステムを受け取れる。</p>

<p>普通は要件定義を手伝ってくれるので、プロの知見を元に要件を固めることができる。</p>

<h4 id="section-10">デメリット</h4>

<p>カスタマイズを行う分、コストが多くかかる。
納品することがゴールなため、要件定義をしっかり握れていないと、ただの使えないシステムが出来上がる。
プロジェクトが成功するかどうかわからない。（納品のQCDにおいて、日本ではよく炎上する）</p>

<h4 id="section-11">向いている案件</h4>

<p>パッケージだけでは賄えないもの全般。
（外向けの、デザインなども必須なもの。自社独自の仕組み・ワークフロー）</p>

<p>事前に要件を決めきれるもの。変化しないもの。</p>

<h4 id="section-12">個人的感想</h4>

<p>「向いている案件」に該当する案件はあるのか？というのが率直な疑問。</p>

<p>製品・不動産などにおいては一般的な形態だろうが、それはハードの世界ではパッケージ化ということができないからなのでは？と思う。</p>

<p>まして、ソフトウェア業界は技術の進歩がとても速いため、１，２年かけて作った頃には陳腐化していることもありえる。</p>

<h3 id="section-13">内製</h3>

<h4 id="section-14">概要</h4>

<p>自社でエンジニアを持ち開発を行うモデル。
社内で進めるので、保守性・意識のすり合わせ・スピード感の点で優れる。</p>

<p>システムのレベルは、社内のエンジニアのレベルがダイレクトに反映される。</p>

<h4 id="section-15">メリット</h4>

<p>社内に抱えているため安心できる。
意識のすり合わせのコストが激減する。</p>

<p>変更の要求が容易に行えるため、
変更の容易さ、カスタマイズしやすさ。機密性の高さが挙げられる。</p>

<h4 id="section-16">デメリット</h4>

<p>自社でエンジニアを抱える必要がある。工数が割かれる。
（レベルの高いエンジニアを集めることは難しい。）</p>

<h4 id="section-17">向いている案件</h4>

<p>社内秘を扱うようなシステム。
自社の業務に直結するようなシステム。</p>

<h4 id="section-18">個人的感想</h4>

<p>IT屋さんであれば、自社にエンジニアを抱えているし、
そもそも外注とかコンサルティングを受けようという発想も少ないだろう。</p>

<p>ただ、他の業態の企業であれば、そもそも社内にエンジニアのリソースなどはないはず。
（あったら、その会社は本業からズレている。）</p>

<p>IT屋だけがとれる戦略だが、なんでもかんでも自分たちで作るより、パッケージ化されたものを買ってきたほうが安上がりなことも多い。</p>

<h3 id="section-19">技術顧問</h3>

<h4 id="section-20">概要</h4>

<p>社外雇われ技術責任者（CTO）的なポジションを担うことで、その会社を技術の側面から支援する。</p>

<p>立ち位置としては、弁護士や会計士のような技術コンサルタント＆開発者。
（技術者は、フリーランスでも組織に属していてもどちらでも構わない。）</p>

<h4 id="section-21">メリット</h4>

<p>比較的ローコストで始められる。小回りがきく。
要件が固まっていなくても進められる。</p>

<h4 id="section-22">デメリット</h4>

<p>規模が小さい時は有効だが、大きくなるとコスパが悪くなる。</p>

<p>担当の技術者のレベルに大きく依存する（属人性の高いモデル）</p>

<p>継続的にサポートされるのかどうかに不安が残る。</p>

<h4 id="section-23">向いている案件</h4>

<p>エンジニアがいないような会社はうってつけ。
（これによってメイン業務に注力できる）</p>

<h4 id="section-24">個人的感想</h4>

<p>製品を提供するのではなくてコンサルタントに近い。
スタートアップなどでエンジニアを確保できない場合に有効だと思われる。</p>

<p>技術に疎い人が判断するのは難しいが、相手をプロとして信用できるかが大事。
（弁護士や会計士における国家資格のようなものが欲しい）</p>

<p>また属人性が高すぎて、いざ担当者が抜けた場合のことを考える必要がある。</p>

<p>そのため、提供する側のブランディング、継続性の担保が肝になる。
（テクノロジスト集団・OSSのコミッター etc…）</p>

<h3 id="section-25">今後のビジネスモデルとして</h3>

<h4 id="section-26">技術動向（ツール・指向）</h4>

<p>インフラやプログラミング言語の進化によって、プログラマの作業がよりコアな部分に集約され知的労働化されているため、凄腕のエンジニア一人が１００人分の力を持つことが当たり前になっています。</p>

<p><strong>フルスタックエンジニア</strong>という言葉がバズワード化していますが、
技術が複雑・細分化していて、言葉通りの意味の人材はツチノコくらいレアでしょう。</p>

<p>また、技術の進歩がものすごく速いため、重要なのは今のスキルでなく、
新技術を積極的に学びとり、それを現実で活かせるだけの地頭・指向だと思います。
それがある人材さえいれば、少数精鋭でもなんでも作れる時代です。</p>

<p>また、SaaSと行った言葉に象徴されるように、
これまでの<strong>プログラムを作って納品する</strong>モデルから、<strong>プログラムを使ってサービスを提供する</strong>モデルへと変化しています。</p>

<h4 id="section-27">技術者のニーズ</h4>

<p>（※ここでは上記の優秀なエンジニアに該当する人たちを指す。）</p>

<p>そんな技術者たちのニーズは、先ほどの特徴から推測すると、</p>

<ul>
  <li>自分の知らない分野を学んだり切磋琢磨できること</li>
  <li>目の前の仕事に忙殺されず、知的好奇心を探求できること（趣味も含む）</li>
  <li>本来の目的に合致した業務を行えること</li>
  <li>周りからフィードバックを受けられること（PDCAを回せる）</li>
  <li>場所・時間を制限されないこと</li>
</ul>

<p>が挙げられるのではないかと思います。</p>

<p>それを満たす職場環境として、「納品のない受託開発」で触れていたような、</p>

<ul>
  <li>技術者が集まって交流しあえる場があること</li>
  <li>自ら要件定義、開発、保守を行えること</li>
  <li>忙しすぎない（締め切りを一方的に決められない）こと。</li>
</ul>

<p>などが要件に入りそうです。</p>

<h4 id="section-28">技術者の評価・地位</h4>

<p>ソフトウェア業界は技術の変化は変化が激しいため、国家資格のようなものはありません。</p>

<p>また、システムというモノが残り長期的に使用されるのに目に見えないという点で、
素人が成果を評価するのは無理です。（なんなら会計士などの専門職よりも判断しづらいと思います。）</p>

<p>というわけで、技術者の評価は第三者に委ねるのが合理的です。</p>

<p>第三者として挙げられそうなのはやはり他の開発者たちでしょう。</p>

<p>OSSでの貢献を測る格付け機関とかもできるかもしれませんし、
ギルドのようなエンジニアの会合とかがあればそこでお互いに発表しあって評価しあえるかもしれません。
（詳しくないですが、弁護士とかも弁護士会的な感じで同業で集まってんでしょ？きっと）</p>

<h3 id="section-29">結論</h3>

<p>今後は技術顧問だけでなく、テクノロジ集団の需要も上がってくると思います。
理由としては以下。</p>

<ul>
  <li>エンジニアは互いに協調することを望む。</li>
  <li>レベルが高ければ数人でも大規模プロジェクトを回せる。</li>
  <li>日本では人を採用することはリスクなので、費用対効果のわからない技術者は抱えづらい。</li>
  <li>エンジニアの格付けを行う必要性がある</li>
</ul>

<h4 id="section-30">パッケージ</h4>

<p>→ソフトウェア独特の形態でメリットはあるので、業態としては生き残ると思います。</p>

<p>ただ、いいツールはどんどんオープン化していき、製品でなくサービスでのビジネスモデルになると思います。
対外的な技術アピールと、お試し期間を設けることができるからです。</p>

<p>まずは試してもらって、実際に運用するならライセンス料を払ったりメンテナンスを受けれるようにする。
保守・サポートで稼ぐという、よくあるフリーミアムのモデルですね。</p>

<h4 id="sier">SIer</h4>

<p>大規模開発の外注というモデルの崩壊</p>

<p>→少数精鋭のプロ集団に外注するか、自社内でエンジニアを大量に抱えるタイプに変わると思います。</p>

<p>ただ、本業が別にある会社がエンジニアを抱えるモデルは現実的ではないので、プロ集団に外注する形になると思います。
その場合、形態としてはSIerと呼べるものかもしれないが、現行の人月単価のカスタマイズ業者とは異なります。</p>

<h4 id="section-31">フリーランス</h4>

<p>信用のある第三者に格付けされることが重要。</p>

<p>個人でやる作業は、信用や継続性・開発者個人のモチベーション的にもあまり広がらないのではと考えています。</p>

<p>（あと、フルスタックエンジニアじゃないと厳しいかも。）</p>

<h4 id="section-32">ギルド</h4>

<p>個人的に本命だと考えるもの。</p>

<p>エンジニア同士のコミュニティ。（たぶんデザイナーも入ってくる）。
会社のように雇用契約を結ぶのではなく、サークルに近い集まり。
お互いに定期的に交流し、技術を磨き合ったり評価しあったりする。</p>

<p>チームを組んで開発を行う。チームは固定でも流動でも様々。</p>

<p>開発者は、お互いに高め合ったり補完しあえるし、良い物を作るモチベーションも湧く。</p>

<p>依頼者としても、スピード感やレベルの調整ができるし、いきなり逃げ出される心配も少ない。
（そうなったら違うチームに声をかければいいし。）</p>
]]></content>
  </entry>
  
</feed>
