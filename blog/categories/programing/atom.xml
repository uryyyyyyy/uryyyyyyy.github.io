<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programing | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/programing/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-05-06T20:34:19+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2013/06/08/readable-code/"/>
    <updated>2013-06-08T20:48:16+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2013/06/08/readable-code</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51MgH8Jmr3L.jpg" width="354" height="500" alt="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" title="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" /></a></p>

<p>たまには技術的な本を。</p>

<p>初心者なりに読んだ備忘録でしか無いので、既にプログラマの方にも、全くわからない方にも、面白くないようなすごい中途半端な内容になると思います＾＾；悪しからず。。。</p>

<p>そもそもコードは、マジメに作るならなら「とりあえず書いたらそれっきり」というものは少なそうです。というのも、テストで何かミスがあったら適宜修正する必要があるし、新しく何かを作るときにも過去のモノを流用できるならそのほうがコストがかからないから。
また、先の「２０００年問題」も、当時の開発者たちは自分の作ったプログラムがそんなに長いこと使われると想定していなかったために起きたものだと聞いています。</p>

<p>良いコードを書くことは、他人（半年後の忘れてる自分も含む）が読みやすいようにするということで、読みやすければそれだけ自分の作品が長持ちし、将来のコスト削減にもつながります。</p>

<h3 id="section">個々のテクニックを箇条書きで。</h3>

<h4 id="section-1">命名には意味を込める。（メソッドや変数名）</h4>

<ul>
  <li>汎用的な単語よりも、動作が具体的な単語を選ぶ（例：getやmakeは抽象的すぎる）</li>
  <li>逆に汎用的な単語を使うときは、「一時的なもの」「それ以上の説明が不要なもの」のとき（例：tmpやi）</li>
  <li>イテレータを複数使うときは、それぞれ何に使われているかわかるようにする。</li>
  <li>単位をはっきりさせる（例：時間（ミリ秒）→t_ms）</li>
</ul>

<h4 id="section-2">コメントはコードから読み取りにくいものを</h4>

<ul>
  <li>まずはコードを直せないか考える（優れたコード　＞　見にくいコード　＋　優れたコメント）</li>
  <li>メソッドのそもそも行いたい処理やを書く</li>
  <li>試行の結果を書く（なぜこうなったのか明らかにするためと、他人が同じ試行をするムダを省くため）</li>
  <li>他人が気になるだろうな、と思うところはとりあえず書いてみる。</li>
  <li>後で直すべきところ、もっと簡潔に書けそうなところにはメモを残しておく。（修正ポイントが明確になるため）</li>
</ul>

<h4 id="section-3">条件分岐</h4>

<ul>
  <li>否定より肯定でまとめる。（統一した方がみやすい）</li>
  <li>単純な条件を先に（思考をすっきりさせるため）</li>
  <li>目立つ条件を先に（目立つ方に意識が行きがちなため）</li>
  <li>do while〜や三項演算子は避ける（そもそも直感的な考え方でないため。他の一般的な手法で代用できるため）</li>
  <li>何層にもネストはしない。（人がスタックできるのはせいぜい３つか４つのコトまで。それ以上は追えない→ヌケモレが起こりやすい、修正したくない）</li>
</ul>

<h4 id="section-4">その他</h4>

<ul>
  <li>１つのメソッドは２０行までが目安（それ以上長くなる時は分割できないか考えるべき）</li>
  <li>細かい関数をたくさん作ると再利用ができる（ただし細かくし過ぎるとややこしくなる）</li>
  <li>標準ライブラリの中身を知っておくべき（わざわざ自分で用意するエンジニアが多いが、正直時間のムダ）</li>
  <li>一般的なエンジニアが一日に書くコード数の平均は１０行（ほとんどが再利用やテスト。そのため綺麗なコードは重要）</li>
  <li>頭がいいコードには気をつける（自分が理解できるのはずっとそのことを考えていたから。初見の人にもわかるコードが良いコード。）</li>
  <li>逆から考えなおすことがいい場合も（○○と××を含む、よりも△△以外、とする方がわかりやすかったり）</li>
  <li>変数はなるべく不変にする。（理解しやすい）</li>
  <li>スコープをなるべく狭く（保守性のためにも、人のスタックの限界のためにも。）</li>
  <li>なるべく結合を弱く（テストが楽。予期せぬ動作が起こりにくい）</li>
</ul>

<h3 id="section-5">まとめ</h3>

<p>良いコードを書くということは文章を書くのに似てます。相手の理解度を慮って、簡潔に伝えたいことを伝えることだから。
僕はプログラミング大好きなギークでは無いので、ただコーディングすること自体に興味はありません。</p>

<ul>
  <li>そもそもなぜ作るのか？</li>
  <li>どうやったら効率良くなるのか？</li>
  <li>相手に理解してもらうにはどうしたらいいのか？
を考えることの方が好きです。</li>
</ul>

<p>この本の内容を意識して、相手に伝わる文章を書く練習としてコードを書いて行きたいと思います。</p>
]]></content>
  </entry>
  
</feed>
