<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ECMAScript | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/ecmascript/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2016-03-16T01:11:30+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ECMAScript5の配列のメソッド]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/06/28/js-array/"/>
    <updated>2014-06-28T06:45:20+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/06/28/js-array</id>
    <content type="html"><![CDATA[<p>ECMAScript5で追加されたらしい配列のメソッド群のまとめ</p>

<!--more-->

<h3 id="section">メソッド群</h3>

<ul>
  <li>indexOf</li>
  <li>lastIndexOf</li>
  <li>forEach</li>
  <li>map</li>
  <li>filter</li>
  <li>every</li>
  <li>some</li>
  <li>reduce</li>
  <li>reduceRight</li>
</ul>

<h3 id="indexof">indexOf</h3>

<p>第一引数と等しい配列要素のうち、最初の要素番号を返す。</p>

<p><code>js
(function(){
    var arr = ['a', 'b', 'c', 'a', 'd'];
    console.log(arr.indexOf('a')); // 0
    console.log(arr.indexOf('b')); // 1
    console.log(arr.indexOf('z')); // -1
    console.log(arr.indexOf('a', 1)); // 3
})();
</code></p>

<h3 id="lastindexof">lastIndexOf</h3>

<p>第一引数と等しい配列要素のうち、最後の要素を番号返す。</p>

<p><code>js
(function(){
    var arr = ['a', 'b', 'c', 'a', 'd'];
    console.log(arr.lastIndexOf('a')); // 3
    console.log(arr.lastIndexOf('b')); // 1
    console.log(arr.lastIndexOf('z')); // -1
    console.log(arr.lastIndexOf('a', 2)); // 0
})();
</code></p>

<h3 id="foreach">forEach</h3>

<p>配列の要素に対してコールバック関数を実行する。</p>

<p><code>js
(function(){
    var arr = ['a', 'b', 'c'];
    arr.forEach(function(element, index, array){
        console.log('arr[' + index + '] = ' + element);
    });
    // arr[0] = a
    // arr[1] = b
    // arr[2] = c
})();
</code></p>

<h3 id="map">map</h3>

<p>配列の要素に対してコールバック関数を実行した配列を生成する。</p>

<p><code>js
(function(){
    var arr = [2, 4, 6, 8, 10];
    var result = arr.map(function(element, index, array){
        return elem * 2;
    });
    console.log(result); // [4, 8, 12, 16, 20]
})();
</code></p>

<h3 id="filter">filter</h3>

<p>配列の要素に対してコールバック関数を実行しtrueを返した要素で構成された新しい配列を生成する。</p>

<p><code>js
(function(){
    var arr = [1, 2, 3, 4, 5];
    var result = arr.filter(function(elem){
        return elem % 2 === 0;
    });
    console.log(result); // [2, 4]
})();
</code></p>

<h3 id="every">every</h3>

<p>配列の要素に対してコールバック関数を実行し、全ての要素でtrueを返すか判定する。（and）</p>

<p><code>js
(function(){
    var test = function(arr) {
        return arr.every(function(elem) {
            return elem % 2 === 0;
        });
    };
    console.log(test([1, 2, 3, 4])); // false
    console.log(test([2, 4])); // true
})();
</code></p>

<h3 id="some">some</h3>

<p>配列の要素に対してコールバック関数を実行し、ひとつでもtrueを返すか判定する。（or）</p>

<p><code>js
(function(){
    var test = function(arr) {
        return arr.some(function(elem) {
            return elem % 2 === 0;
        });
    };
    console.log(test([1, 2, 3, 4])); // true
})();
</code></p>

<h3 id="reduce">reduce</h3>

<p>隣り合う2つの要素に対して左から右へコールバック関数を実行する。</p>

<p>初期値を指定すると、初めの要素のpreviewがそれになる。</p>

<p>```js
(function(){
    var result = [1, 2, 3, 4].reduce(function(previous, current, index, array){
        return previous + current;
    });
    console.log(result); // 10 (=1 + 2 + 3 + 4)</p>

<pre><code>// 初期値を指定
var result = [1, 2, 3, 4].reduce(function(previous, current, index, array){
    return previous + current;
}, 100);
console.log(result); // 110 (=110 + 1 + 2 + 3 + 4) })(); ```
</code></pre>

<h3 id="reduceright">reduceRight</h3>

<p>隣り合う2つの要素に対して右から左へコールバック関数を実行する。</p>

<p>```js
(function(){
    var result = [4, 6, 100].reduceRight(function(previous, current, index, array){
        return previous - current;
    });
    console.log(result); // 90 (= 100 - 6 - 4)</p>

<pre><code>// 初期値を指定
var result = [4, 6, 100].reduce(function(previous, current, index, array){
    return previous - current;
}, 300);
console.log(result); // 190 (=300  - 100 - 6 - 4) })(); ```
</code></pre>
]]></content>
  </entry>
  
</feed>
