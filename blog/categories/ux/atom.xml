<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UX | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/ux/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-05-24T12:44:26+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UXデザイン入門]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2013/07/10/ux-design-introduction/"/>
    <updated>2013-07-10T11:49:31+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2013/07/10/ux-design-introduction</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822296105/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/51lR2WShy5L.jpg" width="387" height="500" alt="UXデザイン入門" title="UXデザイン入門" /></a></p>

<p>ソフトウェアの設計に関しての意思決定の進め方が細かく載ってる本。UXとは、ユーザーエクスペリエンスの略です。
集団でどう意識の共有をしていくかとか、なかなかわかりやすかった。</p>

<ul>
  <li>
    <p>開発者は構造全てを表現したがるが、ユーザーはわかりやすさのみ求める。
→開発者は用いた機能や技術のことを伝えたがる、しかしユーザーは使えればなんでもいい。相手の視点に立った思考を心がけるべき。</p>
  </li>
  <li>
    <p>開発者はユーザーを理解できない
→そもそも理解し切ることはムリ。そこは謙虚に意見を取り入れる必要がある。なので現場の声を聞くのは必須。</p>
  </li>
  <li>
    <p>UXデザインの対象はあくまでユーザー
→ユーザー（使用者）は顧客（購買決定者）と異なる場合もある。UX（UI）はあくまでユーザーにとっての使いやすさを。</p>
  </li>
  <li>
    <p>顧客のメリットと合致させる
→そうは言っても売れなければ意味が無い。ユーザーの使いやすさを、顧客の得なように伝える。（ユーザーの生産性を上げる。サポート・キャッチアップ費用の削減など）</p>
  </li>
  <li>
    <p>デザイン調査は、ユーザーの現状を５W１Hで抑える。根底のニーズを把握する。</p>
  </li>
  <li>
    <p>構想初期段階ではあえて抽象的にしておき、可能性を狭めない。
→何気ない言葉でも、知らないうちにバイアスがかかり思考を狭めてしまうことがある。</p>
  </li>
</ul>

<p>以上がざっくりとした内容です。ペルソナとか以降は説明がややこしいので割愛。</p>

<p>で、開発の現場でよくある例と、その利点・問題点についてちょっと考えてみます。
大きく、</p>

<ul>
  <li>言われたとおりに作るSIer型</li>
  <li>独断でニーズを想定するベンチャー型</li>
</ul>

<p>で書いていきます。</p>

<h4 id="sier">言われたとおりに作るSIer型</h4>
<p>利点：
人材を選ばなくても同じクオリティに仕上がる
工数見積など想定しやすい</p>

<p>問題点：
ユーザーの声を聞きすぎて思想のないものになる。ガラパゴス化する
差別化出来ないためデスマーチになる（早く安くが求められる）</p>

<h4 id="section">独断でニーズを想定するベンチャー型</h4>
<p>利点：
イノベーティブな製品が生まれやすい</p>

<p>問題点：
工数が読みにくい
保守がしにくい（設計者のコーディング能力に依る）
顧客ニーズとずれてコケる可能性もある。</p>

<p>実際の開発にあたっては、この２つのバランスを取ることが大切かと思います。ベンチャーとかで、自称優秀な人たちが集まって革新的な製品を考える際に、顧客の声を一切聞かないで自分の考える理想の製品を考えてしまう例が多々あるようです。で、実装もままならずバグが多く保守も事実上不可能、おまけにニーズとずれてる、なんて悲劇にならないように気をつけなきゃいけない。現場のユーザーの声ももっと聞かなくてはいけない。</p>

<p>基本的にソフトウェアは改良を加えて長く使うものなので、保守性が高いことはかなり重要。オブジェクト指向とか、DBの正規化とかも保守性を高めるためです。</p>

<p>最後に、人は技術に金を払うのではなく、それでできるメリットやストーリーにカネを払うものです。開発者も、何でその技術を使うのか、を非エンジニアにもわかるように説明出来る必要があるかと思います。</p>
]]></content>
  </entry>
  
</feed>
