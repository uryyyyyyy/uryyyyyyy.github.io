<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQL | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-01-18T15:04:54+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQLアンチパターン]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2013/10/15/sql-anti-pattern/"/>
    <updated>2013-10-15T18:11:16+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2013/10/15/sql-anti-pattern</id>
    <content type="html"><![CDATA[<p><strong>※過去記事です。</strong></p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115892/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41qHKrFZi0L.jpg" width="391" height="500" alt="SQLアンチパターン" title="SQLアンチパターン" /></a></p>

<p>さて、今日はこの本です。
最近、本のレビューを上げられていないのですが、別にサボっているわけじゃなくて技術書とかやたら難解な哲学書に時間を取られてるからです。普通の本と比べてこれらの本は全然読み進められないですね。。。</p>

<!--more-->

<p>さて、本書は具体的な事例を元に、RDB設計においてのアンチパターン（やってはいけないやり方）とTipsが紹介されています。一つ一つ取り上げて思い出しながらまとめます。が、これだけ読んでも絶対ピンと来ないと思うので、興味を持った人は本書をお手にとって頂ければ。今回はあくまで自分用のまとめになると思います。</p>

<h3 id="section">１ 信号無視</h3>
<p>データ一つに対して複数のIDをひもづける場合。</p>

<p>アンチパターン：VARCHARなどで、カンマ区切りでIDを入れていくこと。検索や集約関数が複雑になってしまう。VARCHARの文字数制限に依存してしまう。</p>

<p>解決策： 多対多の交差テーブルを用意する。</p>

<h3 id="section-1">２ ナイーブツリー</h3>
<p>コメントへのレスなど、階層構造が未定のものの設計。</p>

<p>アンチパターン：常に親のみに依存する。検索クエリが、有限値までしか機能しない。</p>

<p>解決策： 代替ツリーモデル採用 ・経路列挙 ・入れ子集合 ・閉包テーブル</p>

<h3 id="id">３ とりあえずID</h3>
<p>主キーの目的は一意性を保つため。データの重複が起きては全く意味が無い。</p>

<p>アンチパターン： 全てのテーブルにID列を用いる。</p>

<p>解決策：ほんとうに意味がある列なのかを考え、臨機応変に対応するしかない。</p>

<h3 id="section-2">４ 外部キー嫌い</h3>
<p>アンチパターン： 外部キー制約を利用しない。ミスを想定・検証できない。孤児（どこからも参照されないデータ）が生じる。オーバーヘッドが生じるというが、エラーチェックやバグ検証に比べれば微々たるもの。</p>

<p>解決策：きちんと制約を設ける。</p>

<h3 id="section-3">５ 様々な属性値を使いたい。</h3>
<p>後から追加できるような様々な属性値を使いたい。</p>

<p>アンチパターン：汎用的な属性テーブルを使用する。
検索や集約のクエリが複雑になる。データの整合性の確認ができない。</p>

<p>解決策：事前に入りうるデータを想定すべき。（Check制約などを使い制限） 別途テーブルを用意して属性値を並べる。（項目が増えるときはそこだけ修正する。）
### ６ 複数の親テーブルを、条件に応じて参照したい。</p>

<p>アンチパターン：列を一つ追加してそこの値に応じて参照テーブルを変える。</p>

<ul>
  <li>クエリが行いづらい。</li>
  <li>外部キー制約が出来ない。</li>
</ul>

<p>解決策： 参照関係を逆にする。（交差テーブルを用いて、複数の子を持つようにする。）</p>

<h3 id="section-4">７ 複数の値を持つ属性を格納する。</h3>

<p>アンチパターン：複数の列を定義する 列の数までしか追加できない。 Nullが多く入り、検索が困難。</p>

<p>解決策： 交差テーブルを用意する。</p>

<h3 id="section-5">８ メタデータドリブン</h3>
<p>データが大量に溜まってしまった状態。処理が遅くなってしまっているので、各年ごと（or〜ごと）のデータを上手く活用したい。</p>

<p>アンチパターン：テーブルや列を増やしていく。</p>

<p>解決策：パーティショニングと正規化を行う。</p>

<h3 id="section-6">９ 丸め誤差</h3>
<p>小数値を扱う場合</p>

<p>アンチパターン：Float型を使う。</p>

<p>解決策：numericデータ型を使う。制度やスケールを調整することで正しい数値を利用できる。</p>

<h3 id="section-7">10 列の値を特定の値に限定したい</h3>
<p>しかし、その値が増減する可能性がある。（例：勤務地データ　東京・大阪・名古屋・札幌(new)）</p>

<p>アンチパターン：CHECK制約（限定する値で縛る）→拡張が効かない、移植が難しい。変更しづらい。</p>

<p>解決策：別に列テーブルを作って参照する。
（ただし、性別や月次などのように値が決まりきってる場合はCheckでよい）</p>

<h3 id="section-8">11画像など大容量データの紐付け。</h3>

<p>アンチパターン：物理ファイルの使用を必須と思い込む。</p>

<p>一般に対処法は2つある。BLOB型に入れるか、物理ファイルへのパスを保管するか。前者は不規則なデータ量の時にDBの容量がかさむ、編集がしづらい。後者は、物理ファイルのデータはバックアップやロールバックが行いにくく、整合性を保てない。</p>

<p>解決策：必要に応じてBLOB型も検討する。</p>

<h3 id="index">12 indexをやみくもに定義する。</h3>

<p>アンチパターン：なんでもかんでもindexを定義する。→毎回indexを更新する必要があり、重くなる。あまり効率化されない。</p>

<p>解決策：必要なところにのみindexをつけることを徹底する。</p>

<h3 id="section-9">13 列で欠けている値を区別する　</h3>

<p>アンチパターン：NULLと一般値を混同する。→NULLを用いると論理式が複雑になる。一般値で代用するときは、その値の正当性が保証されるか判断する。</p>

<p>解決策：NULLが入らないような設計。そうでなければNULLを一意の値として用いる。</p>

<h3 id="section-10">14 非グループ化列を参照する。</h3>

<p>アンチパターン：非グループ化された列（式）を参照してしまう。</p>

<p>解決策：SQLに甘えず、曖昧さを排除したselect文を記述する。</p>

<h3 id="section-11">15 ランダムセレクション</h3>

<p>アンチパターン：データ量が大きい中でランダムに行をセレクトすると重くなる。→全ての行を配置しなおしたりするから。</p>

<p>解決策：値が連続している場合→１〜MAX値までの間で、主キーでランダムに取る。
飛び飛びの値の場合→欠番の行を取得するなど。</p>

<p>（キー列のリストを受け取って乱数にかけるのが速い。indexもあるだろうし。）</p>

<h3 id="section-12">16 全文検索を行う。</h3>

<p>アンチパターン：LIKEを用いる。</p>

<p>解決策：適切な検索ツールを使う。（各DBベンダーが拡張機能を提供している。フルテキストインデックスなど。）</p>

<h3 id="section-13">17 スパゲッティクエリ</h3>

<p>アンチパターン：複雑なものを一度に取得しようとする。</p>

<p>解決策：一個ずつやればいい。</p>

<h3 id="section-14">18 列名はちゃんと命名しろ</h3>

<p>アンチパターン：SYA_IDとか</p>

<p>解決策：見て意味が理解できなければ意味が無い。</p>

<h3 id="section-15">19 パスワード</h3>
<p>アンチパターン：平文で残すな。</p>

<p>解決策：ハッシュ値を格納して、チェックのみ行う。（≒暗号化）</p>

<h3 id="sql">20 SQLインジェクション</h3>

<p>アンチパターン：何も対策しない。</p>

<p>解決策：プログラムを作る際はサニタイズする。</p>

<h3 id="id-1">21 擬似キー（IDとか。重複を防ぐ役割）</h3>

<p>アンチパターン：欠番を気にする。</p>

<p>解決策：int型だけでものすごい数があるので気にしない。</p>
]]></content>
  </entry>
  
</feed>
