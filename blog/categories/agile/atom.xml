<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Agile | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-01-18T15:04:54+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[アジャイル開発の教科書]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/06/30/textbook-of-agile-development/"/>
    <updated>2014-06-30T00:07:54+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/06/30/textbook-of-agile-development</id>
    <content type="html"><![CDATA[<p>Agileについての基礎を学びたかったので。</p>

<p>技術書みたいなものなので、いつものBookReviewとは違いますが。</p>

<!--more-->

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4797371285/jitabatashiba-22/" target="_blank"><img src="http://ecx.images-amazon.com/images/I/41BWXiUC4NL.jpg" width="354" height="500" alt="わかりやすいアジャイル開発の教科書" title="わかりやすいアジャイル開発の教科書" /></a></p>

<h3 id="section">要望を把握できているのか？</h3>

<p>要望は変化する。受け入れきれない。
始めに来る要望が正しいことも、それを開発者が正しく理解できることも多くないので、柔軟にしておく（初めに全て決めない）。
※きちんと要件定義できて突き詰めきれる規模なら問題はない。</p>

<p>アジャイルのデメリットは多少効率が落ちることと、お客様の言うとおりにせずに考えなきゃいけないので難しいこと。</p>

<p>お客様と主従関係になるのではなく、対等な関係として位置する。</p>

<p>ドキュメントを書くよりも動くものを見せていくほうが理解が早い。
コードを読んだほうが人にも誤解なく伝わる。</p>

<h3 id="section-1">分割して分担する</h3>

<p>機能を細かく分けて組み合わせていく。</p>

<p>一気通貫で組み上げない分効率が悪くなるかもしれないが、
変更・再利用しやすく、コードの一部だけ抜き出しても理解できる。
（上から下まで通すロジックを書くと、脳内OoMするのでは？）</p>

<p>そのためにはペアプロやコードレビューをもっと徹底的に。</p>

<h3 id="section-2">お客様に見せることですりあわせられる。</h3>

<p>顧客に提供するのは価値。
そのためにはどういった仕様にすればいいのか。
（SaaS化する、キチンと説明した上で製品を納品する）</p>

<p>出来上がってみないと顧客の要望を把握しきれなかったりするので、
Mockや完成品を見せて、ズレていたら説明・理解・修正を繰り返していく必要がある。</p>

<p>（私見ですが、パラダイムシフトや知識不足にはモノを見せるのが早かったりするのではないでしょうか？
いくら説明しても抽象的な部分は理解しきれないと思うので。）</p>

<h3 id="section-3">変化を抱擁せよ</h3>

<p>その時の最大を求めて変化していきたい。</p>

<p>変更は改善を意味する。変化に強い設計を。
そのためにはソフトウェアを柔軟に。
技術・ニーズの変化にも対応しやすい。</p>

<h3 id="section-4">タイムボックス・スプリント</h3>

<p>期間を短く切って、その期間内に完結する修正を入れていく。</p>

<p>半ば強制的に設計が分割される。</p>

<p>短い期間でPDCAを回すことで、改善のスピードが向上する。</p>

<p>タイムボックス完了時には、実働するソフトウェアを組み上げている。
それを顧客に見せつつ、ズレがあれば次に即座に修正を加えていく。</p>

<h3 id="ci">CI</h3>

<p>早くフィードバックしたほうがコストが低いと言われている。</p>

<p>ビルドだけでなくてテストやデプロイまで回したい。</p>

<h3 id="yagni">シンプルに yagniに</h3>

<p>YAGNI（You ain’t gonna need it）</p>

<p>その時に必要な最小構成で組み上げていくことで、結果として変更に強くなる。</p>

<p>同じことは二度しない。拡張しにくくなるから。</p>

<h3 id="section-5">振り返る</h3>

<p>PDCAを回さないと何が悪かったのかわからない。
指標をおいてそれをクリアしていくこと</p>

<h3 id="section-6">見える化</h3>

<p>データが見えることとと見える化することは違う。
次の行動を誘発するのが見える化。
データを羅列するだけでは意味がない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redmine&Agile]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/06/15/redmine-memo/"/>
    <updated>2014-06-15T11:48:34+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/06/15/redmine-memo</id>
    <content type="html"><![CDATA[<!--more-->

<p>redmine &amp; カンバン</p>

<p>アジャイルの単語の定義と、での認識</p>

<p>アジャイル開発・・・短い周期で動く製品を組み上げていくスタイル。顧客の優先度順に機能を作れて、認識に齟齬があればすぐに修正できる。</p>

<p>ウォーターフォール・・・現行の開発。期間と顧客の要求を定義して、それを守るように進める。
IT土方の時代なら上手く機能しそうだけど。。。</p>

<p>ストーリー・・・顧客の価値ベースで意味のある単位。顧客からの要望・不具合報告・新機能の追加要件などなどが当てはまる。粒度は作業量で揃えたいが、あくまで顧客のメリットベース。</p>

<p>見積もり・・・工数で書くと人によって異なるので、ポイントなど相対的な指標で書き込む。数字が大きいと厳密性がなくなるので、粒度は荒くても十分</p>

<p>PDCAを多く回す。
そのためには</p>

<ul>
  <li>定量的なデータを見積もり検証する</li>
  <li>サイクルを多く回す</li>
</ul>

<p>コンサルやマネージャーに進捗を確認してもらうには、
あるいは、開発者のモチベーションを上げるには。</p>

<ul>
  <li>バーンダウン</li>
  <li>カンバン</li>
  <li>朝会議</li>
</ul>

<p>redmineのPlugin ALMiniumでコードの管理やスプリントもできる。</p>

<ul>
  <li>普段はgitlab</li>
  <li>Redmineでのプラグインはサポートしないが便利くらいにしたい。</li>
</ul>

<p>http://qiita.com/cock1doodledoo/items/39e6cea44a377207eaff</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agileメモ]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/06/15/agile-memo/"/>
    <updated>2014-06-15T11:17:47+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/06/15/agile-memo</id>
    <content type="html"><![CDATA[<p>Agileとは何なのか？なぜこんなに評価されてるのか？</p>

<!--more-->

<p>対比としてウォーターフォール型が語られるので、それと比較します。</p>

<h3 id="section">目的</h3>

<h4 id="section-1">ウォーターフォール</h4>

<p>スケジュールを守ること。段取りをかっちり固めること</p>

<h4 id="agile">Agile</h4>

<p>顧客の価値の最大化</p>

<h3 id="section-2">特徴</h3>

<h4 id="section-3">ウォーターフォール</h4>

<ul>
  <li>設計をかっちり固める</li>
  <li>長期的に行う</li>
  <li>途中でミスると手戻りがすごく大きくなる</li>
  <li>仕様書が大事</li>
  <li>契約に従う</li>
  <li>管理が楽</li>
  <li>開発者はただの実装者になる</li>
  <li>顧客は自分の欲しいものが明確に伝えられる</li>
</ul>

<h4 id="agile-1">Agile</h4>

<ul>
  <li>設計はあとから変化するかもしれない</li>
  <li>短いスパンで切っていく</li>
  <li>ミスを早めに見つけて対応できる</li>
  <li>動くシステム（≒Mock）が大事</li>
  <li>仕様より顧客との協調を優先する</li>
  <li>バランスを取るのが難しい</li>
  <li>開発者も全体の流れを考える必要がある。</li>
  <li>顧客も製品を見るまではっきりしていない</li>
</ul>

<h3 id="section-4">背景</h3>

<p>では、なぜAgileが盛んになったのか。
僕が考える理由は以下です。</p>

<h4 id="section-5">アプリケーションの複雑化</h4>

<p>電卓レベルではなく複雑なシステムになるにつれて、顧客がアプリケーションの全体像や意義を全て把握できない規模になってきた。</p>

<p>同時に、開発の規模も増加してきて、長期計画を立てられるレベルでなくなってきた。</p>

<h4 id="it">IT環境の変化の激しさ</h4>

<p>インターネットの普及により、技術の進歩や他社の変化が激しくなってきたため、１年２年前では考えられない要因が多数入ってくるから。</p>

<h4 id="section-6">設計の洗練</h4>

<p>手続き型からオブジェクト、関数型へ変化していき、
初めにきっちり仕様を固めなくても変化に強い設計が行えるようになった。
オブジェクト指向の色々な原則も小さく柔軟に、というところから来ている。</p>
]]></content>
  </entry>
  
</feed>
