<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ubuntu | ジタバタしばた]]></title>
  <link href="http://uryyyyyyy.shake-freek.com/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://uryyyyyyy.shake-freek.com/"/>
  <updated>2015-11-26T20:58:19+09:00</updated>
  <id>http://uryyyyyyy.shake-freek.com/</id>
  <author>
    <name><![CDATA[しばたこ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[別マシンを使ってクライアントサイド開発]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2015/01/18/develop-clientside-with-server/"/>
    <updated>2015-01-18T14:31:10+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2015/01/18/develop-clientside-with-server</id>
    <content type="html"><![CDATA[<p>最近のクライアントサイド開発がリッチになったおかげで、僕のノートPCだとビルドとかに時間かかるようになってしまったので、その対応のお話。</p>

<!--more-->

<h2 id="section">問題提起</h2>

<p>クライアントサイドの開発で、Reactを使うと必然的にwebpackなどのモジュール管理ツールが必要になったり、逐次動作を確認したいので仮サーバー（SimpleHttpServerやgulp-webserverなど）を立てたりすると思います。</p>

<p>が、僕のノートPCが低スペックなおかげで、これらをやりながらEditorとブラウザを立ち上げてると発熱がヤバイです。</p>

<p>ということで、ビルドや仮サーバーの処理を外部マシンにやってもらうことでノートPCの負荷を軽くしようと考えました。</p>

<p>なお、以降は、</p>

<ul>
  <li>HostPC ： ブラウザやコードをいじるメインのPC。今回だと低スペックのノートPC。</li>
  <li>GuestPC ： ビルドなどの処理用PC。GUI要らない。</li>
</ul>

<p>と呼ぶことにします。</p>

<h2 id="section-1">ゴール</h2>

<ul>
  <li>HostPCはブラウザとEditorのみを開き、HostPCのコードを編集する。</li>
  <li>GuestPCは、HostPCで編集されたコードをビルドして仮サーバーを立てる。</li>
</ul>

<p>そのために、</p>

<ul>
  <li>GuestPCにHostPCのソースコードを同期できる。</li>
  <li>GuestPCのgulp-webserverにHostPCからアクセスできる。</li>
</ul>

<p>を構築します。</p>

<h2 id="section-2">構築開始</h2>

<h3 id="guestpchostpc">GuestPCにHostPCのソースコードを同期</h3>

<p>今回の例だとGuestPCはただの負荷分散用で、必要なときに必要なスペックだけ調達したいので、このPCでコードを管理しておくことは想定しません。</p>

<p>ということでソースコードはHostPCにあります。</p>

<p>そこからGuestPCへファイルを転送するには、<code>rsync</code>を使います。使うには、GuestPC、HostPCのどちらにもrsyncをインストールするだけです。</p>

<p>そして、HostPCでこんな感じのコマンドを打ちます。</p>

<p><code>
rsync -arvz -e ssh /hostPC/path/to/target guestPC@XXX.XXX.XXX.XXX:/home/guest/folder
</code></p>

<p>これで転送できます。
オプションは調べてください。（–deleteをつけてしまうとGuestPCでbuildしたものが消えてしまうので付けないほうがいいです。）</p>

<p>パスワードを聞かれるのが嫌なら、GuestPCにHostPCの公開鍵を入れておきましょう。「ssh パスワードなし」とかでググればあります。</p>

<p>ちなみに、始めは全て転送しますが、その後の変更は差分だけで済むようです。
数十MBのフォルダで試しても転送量と速度は気になりませんでした。</p>

<h3 id="guestpcgulp-webserverhostpc">GuestPCのgulp-webserverにHostPCからアクセス</h3>

<p>開発用の仮サーバーは自分自身のアクセスしか受け付けないことが多いです。その場合、HostPCから閲覧できなくなってしまうので、プロキシサーバを立ててリバースプロキシさせる必要があります。</p>

<p>今回はnginxを使うことにします。</p>

<p>GuestPC側でnginxをインストールし、<code>/etc/nginx/nginx.conf</code>あたりの設定ファイルを編集します。</p>

<p><code>
http {
    server {
        listen       8000;
        server_name  localhost;
        location / {
          proxy_pass http://localhost:8001/;
        }
    }
    server {
        listen       8080;
        server_name  localhost;
        location / {
          proxy_pass http://localhost:8081/;
        }
    }
}
</code></p>

<p>設定ファイルを編集したら<code>sudo service nginx restart</code>で再起動。</p>

<p>こんな感じで設定してあげると、HostPCからhttp://GuestPC:8001にアクセスするとGsudo service nginx restartuestPCでポート8000番で立ってる仮サーバーにアクセスできます。今回のサンプルでは、同様に8081番にアクセスすると8080で立ってるサーバーに転送されます。</p>

<h2 id="section-3">まとめ</h2>

<p>以上で、GuestPCにHostPCの開発環境を移すことが出来ました。
どうしてもIDEなどが欲しい昨今において、この構成はいいんじゃないかと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Surface Pro3 にUbuntu入れてDual Bootする]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/10/12/surface-ubuntu-dualboot/"/>
    <updated>2014-10-12T21:52:13+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/10/12/surface-ubuntu-dualboot</id>
    <content type="html"><![CDATA[<p>※自分が以降錯誤した結果、これで上手く行くだろうというのをまとめています。
ですので、この順序でやって本当に上手く行くかは未検証なので自己責任でおねがいします。</p>

<p>また、一部Windows８標準の設定を解除しているため、システム的に脆弱になってるかもしれません。</p>

<!--more-->

<h3 id="section">ゴール</h3>

<ul>
  <li>Surface起動時にUbuntuかWindows８かを選べるようにする。</li>
  <li>パーティションを分けておく</li>
  <li>Ubuntuでキーボードレスでログインできるようにする。</li>
  <li>WindowsとUbuntuでファイルを共有する（未達）</li>
</ul>

<h3 id="section-1">僕の場合の構成</h3>

<ul>
  <li>Surface２５６GB i5</li>
  <li>Ubuntu14.04.01 LTS 64bit</li>
  <li>USB-Keybood: Thinkpad trackpoint</li>
</ul>

<h3 id="section-2">事前準備</h3>

<h4 id="section-3">バックアップの作成</h4>

<p>万が一SSDの中身がぶっ飛んでもいいように、SurfaceのBackUpデータをUSBとかに保存しておきます。</p>

<p>公式サイトからもダウンロードしてこれますが、デフォルトでリカバリ用のパーティションが切ってあって、そこから取ってくるのが楽そうです。</p>

<p>参考 : http://www.microsoft.com/surface/ja-jp/support/storage-files-and-folders/create-a-recovery-drive</p>

<h4 id="bootusb">BootUSBの準備</h4>

<p>インストールしたいLinuxOSのBootUSBを作ります。</p>

<p>これはググれば出てきます。
参考：http://unetbootin.sourceforge.net/</p>

<h4 id="usb">USBハブの準備</h4>

<p>言うまでもないですが、SurfaceにはUSBPortが一つしかないので、BootUSBをそのまま指すとキーボードとか繋げません。</p>

<p>あったほうが絶対ラクです。</p>

<h3 id="section-4">手順</h3>

<p>参考サイト：http://askubuntu.com/questions/265644/dual-boot-surface-pro-with-ubuntu</p>

<h4 id="secure-boot-">Secure boot の解除</h4>

<p>参考サイト：http://www.geek.com/microsoft/how-to-install-ubuntu-on-the-surface-pro-1539262/</p>

<p>http://www.eightforums.com/tablet-touch/47948-surface-pro-3-secure-boot-can-disabled.html</p>

<p>検索で「boot」と打って、「PCの起動オプションの設定」を選択。</p>

<p>「PCの起動をカスタマイズ」を選んで再起動。</p>

<p>するとなんか設定画面が出るので、Troubleshoot &gt; Advanced Options &gt; UEFI Firmware Settings.</p>

<p>的な選択肢を選んでもう一度再起動。</p>

<p>すると黒い画面で「Secure Boot Controll」があるので、Disabledに変更</p>

<p>Exit Setupで再起動。</p>

<p>すると、Windows８側で、BitLockerとかいう暗号化ソフトの認証がリセットされるみたいで、再設定を求められるので、指示にしたがって再設定する。</p>

<h4 id="section-5">パーティションを分ける。</h4>

<p>参考サイト：http://blogs.msdn.com/b/microsoft_surface_blogs/archive/2014/09/08/10555887.aspx</p>

<p>Windows８で、「boot」で検索→「ハードディスクのパーティションの作成〜」を選択。</p>

<p>パーティションの編集画面が出るので、Cdriveを縮小する。</p>

<p>このとき、縮小可能サイズが極端に小さい場合がある。どうやらBitLockerが部分的にハードディスクを占拠しているためらしい。</p>

<p>その場合は、検索「BitLocker」→「BitLockerの管理」で一時的に無効にしておく。</p>

<p>また、しばらくCdriveを使っていた場合、ファイルが断片化してるかもしれないので、デフラグをしておくと少しマシになるかもしれない。</p>

<p>色々やって、Cdriveを縮小できるようになったら、インストールするOSの分（僕の場合は３０GB用意した）とか、バックアップ用パーティション（僕の場合は８０GBくらい用意した）を確保する。</p>

<h4 id="bootusb-1">BootUSBを入れて立ち上げる。</h4>

<p>電源をオフにして、BootUSBをセット。</p>

<p>ボリュームのマイナスボタンを押したまま起動ボタンを押ししばらくまつ。</p>

<p>すると「Surface」の文字が表示された後にいつものgrub画面に飛ぶので、「Try Ubuntu without Install」的なのを選ぶ。</p>

<p>※この段階で「install〜〜」をやるとマズイと思う。</p>

<h4 id="grub2">Grub2の設定をする。</h4>

<p>参考サイト：http://askubuntu.com/questions/449350/ubuntu-14-04-get-windows-8-to-show-up/496692#496692</p>

<p>Windows８（Surface）ではBIOS画面などはなくいきなりWindowsが起動してしまうので、grubが起動するように変更しないといけないっぽいです。</p>

<p>「try Ubuntu〜〜」などで入った後、Terminalで</p>

<p>```
sudo apt-get install grub2-common
sudo update-grub2</p>

<p>sudo add-apt-repository ppa:yannubuntu/boot-repair
sudo sh -c “sed -i ‘s/trusty/saucy/g’ /etc/apt/sources.list.d/yannubuntu-boot-repair-trusty.list”</p>

<p>sudo apt-get update
sudo apt-get install boot-repair</p>

<p>sudo boot-repair
```</p>

<p>を順番に入力していくと、なんかGUIアプリが立ち上がる。
あとはRecommend Repairを選んでそのまま進める。</p>

<h4 id="linux">Linuxのインストール</h4>

<p>ここはいつもどおり。</p>

<p>なんか、「Internetに繋ぐな」って書いてあったので、一旦解除してUpdateもしないで進めた。（繋いだままでも問題ないと思うけど。）</p>

<p>install typeのところで、「Erase disk〜〜」でなく「Something else」を選んだり、
swap areaに６００MBくらい充てて、OS用にext4でmountpointは「/」で３０GBくらい充てて、OS用に充てたところにインストールする。</p>

<p>完了したら再起動。</p>

<h4 id="section-6">仕上げ</h4>

<p>再起動した際にgrubの画面が現れてれば完了。WindowsとLinuxが動くかを確認しておく。</p>

<p>（BitLockerの設定が必要なら有効に戻しておく。）</p>

<p>また、Ubuntuの場合はSurfaceのハードに対応しきれていないようなので、いくつか修正が必要。</p>

<p>まずは、fanのセンサーの設定。</p>

<p><code>
sudo apt-get install lm-sensors
sudo sensors-detect
</code></p>

<p>あとはひたすらYesを選択。</p>

<p>次にBlueToothを認識させる。Gitをインストールした状態で、</p>

<p><code>
git clone git://git.marvell.com/mwifiex-firmware.git
sudo cp mwifiex-firmware/mrvl/* /lib/firmware/mrvl/
</code></p>

<p>で再起動すれば認識するはず。</p>

<p>あと、ログイン時にタッチパネルでパスを打ちたいので、ログイン画面で右上のAccessibility的なところを選択してキーボードを表示させる。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[個人的Dockerの使い方]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/10/02/how-to-use-docker/"/>
    <updated>2014-10-02T23:12:23+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/10/02/how-to-use-docker</id>
    <content type="html"><![CDATA[<p>あくまで個人の用途に限定しますが、なかなか便利です。</p>

<!--more-->

<h3 id="section">前置き</h3>

<p>Dockerの長所として</p>

<ul>
  <li>どこでも動く・ポータブル</li>
  <li>ローカル環境を汚染しない</li>
  <li>処理の効率がいい（ただしLinuxに限る）</li>
</ul>

<p>などというのが挙げられると思います。
が、VMでもほとんど同じことができます。</p>

<p>違いといえば、処理の効率がいい（起動が早い・リソース消費が少ない）ことですが、
前述の通りLinux以外だと意味無いです。</p>

<p>「コンテナとして同じようにDeployできる。」という声に関しても、
低スペックのマシンでスケールするなら単体のアプリケーションだけ動かしとけばよくて、そんなの他のオーケストレーションツールで問題ないと思ってます。（僕の経験が足りない。使いこなしてないだけかもしれませんが）</p>

<h3 id="section-1">本題</h3>

<p>ではどこで使えば便利か、というところですが、</p>

<p><strong>ローカルマシンを汚さない開発環境の構築</strong></p>

<p>です。</p>

<p>当たり前のことなのですが、すごく早くてお手軽です。</p>

<p>例えば、MySQLとMariaDBをサクッと共存させたり、
ちょっとしたWebサーバーを即座に用意したり、
マシンによって異なるツールのインストールを簡略化したりです。</p>

<p>個人的に使ってるのはこれら。</p>

<h4 id="section-2">ミドルウェア系</h4>

<p><a href="https://github.com/uryyyyyyy/vagrant-docker-local">https://github.com/uryyyyyyy/vagrant-docker-local</a></p>

<p>Vagrant1.6からサポートされたDocker providerの機能を使っています。</p>

<p>これを使うと、<code>vagrant up</code>で起動できて、使い終わったら<code>vagrant destroy</code>で消せます。（dockerがビルドの差分を持っているので、再度の立ち上げは爆速です。）</p>

<p>Vagrantfileを見たらわかりますが、各種DBMSをサクッと立ち上げられます。
Port指定やユーザー変更も簡単にできます。</p>

<p>ただし、データの永続化はできないので、Dumpを喰わせるとかが別途必要です。（個人的には、開発環境ならむしろその方がありがたい。）</p>

<p>また、一応MacやWindowsでもproxvVM（boot2docker）を噛ませることで同じようなUIで操作できます。
（ただ、portの指定が二重に必要だったり、rsyncが入ってないとダメです。）</p>

<h4 id="cli">CLIツール系</h4>

<p><a href="https://github.com/uryyyyyyy/docker-command">https://github.com/uryyyyyyy/docker-command</a></p>

<p>まだ不揃いですが、rubyやJavaのコマンドも使えますし、nodeやScalaのインタプリタも使えるはずです。</p>

<p>（ただ、他のコンテナへアクセスするのは別途設定がいるので、別でredisサーバーを立てて、redis-cliを使ってアクセスする、みたいなことはできませんでした。）</p>

<h3 id="section-3">既存のツールと比べて</h3>

<p>（※ただしLinuxに限る）</p>

<h4 id="section-4">ローカルマシンへインストール</h4>

<ul>
  <li>色々なソフトを入れたせいで動作が遅い、とかがなくなる</li>
  <li>MariaDBとMySQLが同一PCで共存できたりする。</li>
  <li>rubyなどの変な依存関係とかの原因不明のバグが起こりにくい</li>
</ul>

<h4 id="section-5">仮想マシンでの起動</h4>

<ul>
  <li>立ち上げるのがめっちゃ早い</li>
  <li>マシンごとに設定し直したりとかいらない</li>
  <li>いっぱい立ち上げてもメモリ消費が少ない</li>
  <li>DockerfileとVagrantfileだけあれば動く（イメージの共有とか要らない）</li>
</ul>

<h3 id="section-6">まとめ</h3>

<p>今、自分の開発ではMariaとかRedisとかを立ち上げつつ、gruntなどを実行して使ってます。
他の開発メンバーにも布教してますが、Windowsマシンだとイマイチですね。。。</p>

<p>Linux系のOSであればとても快適なんじゃないかと思います。
むしろMacやWndowsでDocker使うとか意味がわからない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacbookでUbuntuのfn設定を直す]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/06/22/macbook-ubuntu-func-key/"/>
    <updated>2014-06-22T03:31:50+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/06/22/macbook-ubuntu-func-key</id>
    <content type="html"><![CDATA[<p>MacBookAirにもUbuntuを入れているのですが、Fnキーの設定がひっくり返っているので修正。</p>

<!--more-->

<p>簡単に言うと、
Ｆ７の操作（編集中の文字をカタカナにする）などを押そうと思ったら、そのままでなくFn+F7を押さないといけなくなってしまっている状態なので、標準のキーに戻します。</p>

<p><code>
sudo vim /etc/rc.local
</code></p>

<p>で開いたfileの<code>exit 0</code>の前に</p>

<p><code>
echo 2 &gt; /sys/module/hid_apple/parameters/fnmode
</code></p>

<p>を入れるとfnキーの設定が改善される。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntuのスクロールセッティング]]></title>
    <link href="http://uryyyyyyy.shake-freek.com/blog/2014/06/15/scrollbar-settings/"/>
    <updated>2014-06-15T18:25:11+09:00</updated>
    <id>http://uryyyyyyy.shake-freek.com/blog/2014/06/15/scrollbar-settings</id>
    <content type="html"><![CDATA[<p>Ubuntu14.04の新しいスクロールバーがイマイチなので直します。</p>

<!--more-->

<p><a href="http://www.k5.dion.ne.jp/~r-f/sicklylife/memo/ubuntu1404/settings.html">参考URL：</a></p>

<p><code>
gsettings set com.canonical.desktop.interface scrollbar-mode normal
</code></p>

<p>これで旧来のものになります。</p>

<p>ちなみに、</p>

<p><code>
gsettings reset com.canonical.desktop.interface scrollbar-mode
</code></p>

<p>これで元に戻るそうです。</p>

]]></content>
  </entry>
  
</feed>
